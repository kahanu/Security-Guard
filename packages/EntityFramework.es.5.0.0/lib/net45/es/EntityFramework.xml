<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>Una implementación de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> que volverá a crear y, opcionalmente, volverá a inicializar la base de datos con datos solo si la base de datos no existe. Para inicializar la base de datos, se ha de crear una clase derivada y reemplazar el método Seed. </summary>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>Ejecuta la estrategia para inicializar la base de datos para el contexto determinado. </summary>
      <param name="context">Contexto.</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>Cuando se reemplaza, agrega datos al contexto para la inicialización.  La implementación predeterminada no hace nada. </summary>
      <param name="context">Contexto que se va a inicializar.</param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>Una instancia de esta clase se obtiene de un objeto <see cref="T:System.Data.Entity.DbContext" /> y se puede utilizar para administrar la base de datos real que respalda un objeto <see cref="T:System.Data.Entity.DbContext" /> o una conexión. Esto incluye la creación, eliminación y comprobación de la existencia de una base de datos. La eliminación y la comprobación de la existencia de una base de datos se puede realizar utilizando simplemente una conexión (sin un contexto completo) mediante los métodos estáticos de esta clase. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>Este método devuelve true si el contexto tiene un hash de modelo, la base de datos contiene un hash de modelo y los dos hashes coinciden.  Esto indica que el modelo utilizado para crear la base de datos es igual que el modelo actual y, por lo tanto, se pueden utilizar los dos conjuntamente. </summary>
      <returns>true si el hash de modelo en el contexto y en la base de datos coinciden; en caso contrario, false. </returns>
      <param name="throwIfNoMetadata">Si se establece en true, se producirá una excepción si no se encuentran metadatos del modelo en el modelo asociado al contexto o en la propia base de datos.  Si se establece en false, este método devolverá true si no se encuentran metadatos.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>Devuelve la conexión que está siendo utilizada por este contexto.  Esto puede hacer que se inicialice el contexto y se cree la conexión si no existe todavía. </summary>
      <returns>La conexión que está siendo utilizada por este contexto.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>Crea una nueva base de datos en el servidor de bases de datos para el modelo definido en el contexto de respaldo. Observe que la llamada a este método antes de que se ejecute la estrategia de inicialización de base de datos deshabilitará la ejecución de esa estrategia. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>Crea una nueva base de datos en el servidor de bases de datos para el modelo definido en el contexto de respaldo, pero solo si una base de datos con el mismo nombre no existe en el servidor. </summary>
      <returns>true si la base de datos no existía y se creó; en caso contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>El generador de conexión que se utiliza cuando se crea un objeto <see cref="T:System.Data.Common.DbConnection" /> a partir de simplemente un nombre de base de datos o una cadena de conexión. </summary>
      <returns>El generador de conexión que se utiliza.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>Elimina la base de datos en el servidor de bases de datos si existe; de lo contrario, no hace nada. </summary>
      <returns>true si la base de datos no existía y se eliminó; en caso contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>Elimina la base de datos en el servidor de bases de datos si existe; de lo contrario, no hace nada. </summary>
      <returns>true si la base de datos no existía y se eliminó; en caso contrario, false.</returns>
      <param name="existingConnection">Conexión existente con la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>Elimina la base de datos en el servidor de bases de datos si existe; de lo contrario, no hace nada. La conexión con la base de datos se crea utilizando el nombre de base de datos o la cadena de conexión determinados de la misma manera que se describe en la documentación de la clase <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si la base de datos no existía y se eliminó; en caso contrario, false.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión a la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la base de datos especificada es igual a la base de datos actual.</summary>
      <returns>true si la base de datos especificada es igual a la base de datos actual; en caso contrario, false.</returns>
      <param name="obj">Base de datos que se compara con el objeto actual. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>Ejecuta el comando de DDL/DML determinado en la base de datos. </summary>
      <returns>El resultado devuelto por la base de datos después de la ejecución del comando.</returns>
      <param name="sql">Cadena de comando.</param>
      <param name="parameters">Parámetros que se aplican a la cadena de comando.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>Comprueba si la base de datos existe o no en el servidor. </summary>
      <returns>true si la base de datos existe; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>Comprueba si la base de datos existe o no en el servidor. </summary>
      <returns>true si la base de datos existe; de lo contrario, false.</returns>
      <param name="existingConnection">Conexión existente con la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>Comprueba si la base de datos existe o no en el servidor. La conexión con la base de datos se crea utilizando el nombre de base de datos o la cadena de conexión determinados de la misma manera que se describe en la documentación de la clase <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si la base de datos existe; de lo contrario, false.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión a la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>Devuelve la función hash para la base de datos especificada.</summary>
      <returns>La función hash para la base de datos especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>Obtiene el tipo de la base de datos actual.</summary>
      <returns>El tipo de la base de datos actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>Ejecuta el objeto <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> registrado en este contexto.  Si el parámetro <paramref name="force" /> se establece en true, el inicializador se ejecuta independientemente de si se ha ejecutado antes o no.  Esto puede ser útil si se elimina una base de datos mientras se ejecuta una aplicación y es necesario reinicializar. </summary>
      <param name="force">Si se establece en true, el inicializador se ejecuta aunque ya se haya ejecutado.</param>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Obtiene o establece la estrategia de inicialización de base de datos. Se llama a la estrategia de inicialización de base de datos cuando la instancia de <see cref="T:System.Data.Entity.DbContext" /> se inicializa a partir de un objeto <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />.  </summary>
      <param name="strategy">Estrategia.</param>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>Crea una consulta SQL sin formato que devolverá elementos del tipo genérico determinado. El tipo puede ser cualquier tipo que tenga propiedades que coincidan con los nombres de las columnas devueltas desde la consulta, o puede ser un tipo primitivo simple. </summary>
      <returns>Un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> que ejecutará la consulta cuando se enumere.</returns>
      <param name="sql">Cadena de consulta SQL.</param>
      <param name="parameters">Los parámetros que se van a aplicar a la cadena de consulta SQL.</param>
      <typeparam name="TElement">Tipo de objeto devuelto por la consulta.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>Crea una consulta SQL sin formato que devolverá elementos del tipo determinado. El tipo puede ser cualquier tipo que tenga propiedades que coincidan con los nombres de las columnas devueltas desde la consulta, o puede ser un tipo primitivo simple. </summary>
      <returns>Un objeto <see cref="T:System.Collections.IEnumerable" /> que ejecutará la consulta cuando se enumere.</returns>
      <param name="elementType">Tipo de objeto devuelto por la consulta.</param>
      <param name="sql">Cadena de consulta SQL.</param>
      <param name="parameters">Los parámetros que se van a aplicar a la cadena de consulta SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>Devuelve una representación de cadena de la base de datos.</summary>
      <returns>Una representación de cadena de la base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>Proporciona funciones para consultar y trabajar con datos de entidad como objetos.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>Crea una nueva instancia de contexto utilizando convenciones para crear el nombre de la base de datos con la que se realizará una conexión.  Por convención, el nombre es el nombre completo (espacio de nombres + nombre de clase) de la clase de contexto derivado. Para obtener más información sobre cómo se utiliza esto para crear una conexión, consulte la sección de comentarios para <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>Crea una nueva instancia de contexto utilizando la conexión existente para conectar con una base de datos. La conexión no se eliminará cuando se elimine el contexto. </summary>
      <param name="existingConnection">Conexión existente que se utiliza para el nuevo contexto.</param>
      <param name="contextOwnsConnection">Si se establece en true, la conexión se elimina cuando se elimina el contexto; de lo contrario, el autor de la llamada debe eliminar la conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>Crea una nueva instancia de contexto utilizando la conexión existente para conectar con una base de datos y la inicializa a partir del modelo determinado. La conexión no se eliminará cuando se elimine el contexto. </summary>
      <param name="existingConnection">Conexión existente que se utiliza para el nuevo contexto.</param>
      <param name="model">Modelo que respaldará este contexto.</param>
      <param name="contextOwnsConnection">Si se establece en true, la conexión se elimina cuando se elimina el contexto; de lo contrario, el autor de la llamada debe eliminar la conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Crea una nueva instancia de contexto utilizando convenciones para crear el nombre de la base de datos con la que se realizará una conexión y la inicializa a partir del modelo determinado. Por convención, el nombre es el nombre completo (espacio de nombres + nombre de clase) de la clase de contexto derivado. Para obtener más información sobre cómo se utiliza esto para crear una conexión, consulte la sección de comentarios para <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="model">Modelo que respaldará este contexto.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
      <summary>Crea una nueva instancia de contexto en torno a una propiedad <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> existente.  </summary>
      <param name="objectContext">Objeto <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> existente para encapsular el nuevo contexto.</param>
      <param name="dbContextOwnsObjectContext">Si se establece en true, la propiedad <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> se elimina cuando se elimina el objeto <see cref="T:System.Data.Entity.DbContext" />; de lo contrario, el autor de la llamada debe eliminar la conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>Crea una nueva instancia de contexto utilizando la cadena dada como nombre o cadena de conexión para la base de datos con la que se realizará una conexión. Para obtener más información sobre cómo se utiliza esto para crear una conexión, consulte la sección de comentarios para <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="nameOrConnectionString">Nombre de base de datos o una cadena de conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Crea una nueva instancia de contexto utilizando la cadena dada como nombre o cadena de conexión para la base de datos con la que se realizará una conexión y la inicializa a partir del modelo determinado. Para obtener más información sobre cómo se utiliza esto para crear una conexión, consulte la sección de comentarios para <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <param name="nameOrConnectionString">Nombre de base de datos o una cadena de conexión.</param>
      <param name="model">Modelo que respaldará este contexto.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>Proporciona acceso a las características del contexto que tratan el seguimiento de cambios de entidades. </summary>
      <returns>Un objeto utilizado para obtener acceso a las características que tratan el seguimiento de cambios.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>Proporciona acceso a las opciones de configuración para el contexto. </summary>
      <returns>Un objeto utilizado para tener acceso a las opciones de configuración.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>Crea una instancia de base de datos para este contexto y permite realizar la creación, eliminación o comprobaciones de existencia para la base de datos subyacente. </summary>
      <returns>La base de datos creada.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>Llama al método Dispose protegido. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>Elimina el contexto. El objeto <see cref="T:System.Data.Objects.ObjectContext" /> subyacente también se elimina si fue creado por este contexto o si la propiedad se pasó a este contexto cuando se creó el citado contexto. La conexión con la base de datos (objeto <see cref="T:System.Data.Common.DbConnection" />) también se elimina si fue creada por este contexto o si la propiedad se pasó a este contexto cuando se creó el citado contexto. </summary>
      <param name="disposing">true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>Obtiene un objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> para la entidad determinada que proporciona acceso a información sobre la entidad y la capacidad de realizar las acciones en la entidad. </summary>
      <returns>Entrada para la entidad.</returns>
      <param name="entity">Entidad.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>Obtiene un objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> para la entidad determinada que proporciona acceso a información sobre la entidad y la capacidad de realizar las acciones en la entidad. </summary>
      <returns>Una entrada para la entidad.</returns>
      <param name="entity">La entidad.</param>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el contexto especificado es igual al contexto actual.</summary>
      <returns>true si el contexto especificado es igual al contexto actual; en caso contrario, false.</returns>
      <param name="obj">Contexto que va a compararse con el objeto actual. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>Devuelve la función hash para el contexto especificado.</summary>
      <returns>La función hash para el contexto especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>Obtiene el tipo para el contexto actual.</summary>
      <returns>El tipo para el contexto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>Valida las entidades de las que se realiza un seguimiento y devuelve una colección de <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> que contiene los resultados de la validación. </summary>
      <returns>La colección de resultados de la validación para las entidades no válidas. El valor de la colección nunca es null y no debe contener valores null ni resultados para las entidades válidas. </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Se llama a este método cuando el modelo para un contexto derivado se ha inicializado, pero antes de que el modelo se haya bloqueado y utilizado para inicializar el contexto.  La implementación predeterminada de este método no hace nada, pero se puede reemplazar en una clase derivada de modo que el modelo se pueda configurar más adelante antes de bloquearse. </summary>
      <param name="modelBuilder">Generador que define el modelo para el contexto que se está creando.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>Guarda todos los cambios realizados en este contexto en la base de datos subyacente. </summary>
      <returns>El número de objetos escritos en la base de datos subyacente.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>Devuelve un <see cref="T:System.Data.Entity.DbSet" /> para el tipo especificado, de esta forma se pueden realizar operaciones CRUD para la entidad en particular en el contexto. </summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.DbSet" /> para el tipo de entidad determinado.</returns>
      <typeparam name="TEntity">Tipo de entidad para el que debe devolverse un conjunto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>Devuelve un <see cref="T:System.Data.Entity.DbSet" /> para el tipo especificado, de esta forma se pueden realizar operaciones CRUD para la entidad en particular en el contexto. </summary>
      <returns>Objeto <see cref="T:System.Data.Entity.DbSet" /> para el tipo de entidad determinado.</returns>
      <param name="entityType">Tipo de entidad para el que debe devolverse un conjunto.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Punto de extensión que permite al usuario reemplazar el comportamiento predeterminado de validar solo entidades de tipo Added o Modified. </summary>
      <returns>true para continuar con la validación; de lo contrario, false.</returns>
      <param name="entityEntry">Instancia de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> que se supone que se va a validar.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Devuelve el objeto <see cref="T:System.Data.Objects.ObjectContext" /> de Entity Framework que subyace a este contexto.</summary>
      <returns>Devuelve <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>Devuelve una representación en forma de cadena del contexto.</summary>
      <returns>Una representación en forma de cadena del contexto.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Punto de extensión que permite al usuario personalizar la validación de una entidad o filtrar los resultados de la validación. Es llamado por el método <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />. </summary>
      <returns>El resultado de la validación de la entidad. El valor puede ser null cuando se reemplaza.</returns>
      <param name="entityEntry">Instancia de DbEntityEntry que se va a validar.</param>
      <param name="items">Diccionario definido por el usuario que contiene información adicional para la validación personalizada. Se pasará a <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> y se expondrá como <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />. Este parámetro es opcional y su valor puede ser null.</param>
    </member>
    <member name="T:System.Data.Entity.DbExtensions">
      <summary>Contiene un conjunto de métodos de extensión para ayudar en las tareas comunes.</summary>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en <see cref="T:System.Data.Entity.DbContext" /> o <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
      <returns>Una nueva consulta con NoTracking aplicado, o la consulta se origen si no se admite NoTracking.</returns>
      <param name="source">Consulta de origen.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en <see cref="T:System.Data.Entity.DbContext" /> o <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
      <returns>Una nueva consulta con NoTracking aplicado, o la consulta se origen si no se admite NoTracking.</returns>
      <param name="source">Consulta de origen.</param>
      <typeparam name="T">El tipo de elemento.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Nuevo objeto IQueryable con la ruta de la consulta definida.</returns>
      <param name="source">IQueryable de origen en que se llama a Include.</param>
      <param name="path">Lista separada por puntos de los objetos relacionados que se deben devolver en los resultados de la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Un nuevo objeto IQueryable de T con la ruta de la consulta definida.</returns>
      <param name="source">IQueryable de origen en que se llama a Include.</param>
      <param name="path">Expresión lambda que representa la ruta de acceso que se va a incluir.</param>
      <typeparam name="T">El tipo de la entidad que se está consultando.</typeparam>
      <typeparam name="TProperty">El tipo de la propiedad de navegación que se está incluyendo.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Un nuevo objeto IQueryable de T con la ruta de la consulta definida.</returns>
      <param name="source">IQueryable de origen en que se llama a Include.</param>
      <param name="path">Lista separada por puntos de los objetos relacionados que se deben devolver en los resultados de la consulta.</param>
      <typeparam name="T">El tipo de la entidad que se está consultando.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
      <summary>Un método de extensión en IQueryable que enumera los resultados de la consulta. Esto equivale a llamar a ToList sin crear realmente la lista. </summary>
      <param name="source">Consulta de origen.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary> Devuelve una implementación de <see cref="T:System.ComponentModel.BindingList`1" /> que permanece sincronizada con el objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> determinado. </summary>
      <returns>La lista de enlace.</returns>
      <param name="source">Colección con la que la lista de enlace permanecerá sincronizada.</param>
      <typeparam name="T">El tipo de elemento.</typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> se utiliza para asignar clases de CLR a un esquema de base de datos. Este enfoque basado en código para crear un modelo de Entity Data Model (EDM) se conoce como Code First. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DbModelBuilder" />. El proceso de detectar el modelo inicial utilizará el conjunto de convenciones incluidas en la versión más reciente de Entity Framework instalada en su equipo.  </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DbModelBuilder" /> que utilizará un conjunto concreto de convenciones para detectar el modelo inicial. </summary>
      <param name="modelBuilderVersion">Versión de convenciones que se va a utilizar.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> basado en la configuración realizada utilizando este generador. La conexión se utiliza para determinar el proveedor de bases de datos que se está utilizando, ya que esto afecta a la capa de base de datos del modelo generado. </summary>
      <returns>El modelo que se creó.</returns>
      <param name="providerConnection">Conexión que se va a utilizar para determinar la información del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> basado en la configuración realizada utilizando este generador. Se debe especificar la información del proveedor porque esto afecta a la capa de base de datos del modelo generado. Para SqlClient, el nombre invariable es 'System.Data.SqlClient' y el token del manifiesto es el año de la versión (por ejemplo, '2005' o '2008'). </summary>
      <returns>El modelo que se creó.</returns>
      <param name="providerInfo">El proveedor de bases de datos con que se utilizará el modelo.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>Registra un tipo como un tipo complejo en el modelo y devuelve un objeto que se puede utilizar para configurar el tipo complejo. Se puede llamar a este método varias veces para el mismo tipo para realizar varias líneas de configuración. </summary>
      <returns>El objeto de configuración para el tipo complejo especificado.</returns>
      <typeparam name="TComplexType">El tipo que se va a registrar o configurar.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>Obtiene el objeto <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> para este objeto <see cref="T:System.Data.Entity.DbModelBuilder" />.  El registro permite que se registren configuraciones de tipo complejo y entidad derivada con este generador. </summary>
      <returns>La configuración para el objeto <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>Proporciona acceso a la configuración de este objeto <see cref="T:System.Data.Entity.DbModelBuilder" /> que trata convenciones. </summary>
      <returns>El acceso a la configuración</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>Registra un tipo de entidad como parte del modelo y devuelve un objeto que se puede utilizar para configurar la entidad. Se puede llamar a este método varias veces para la misma entidad para realizar varias líneas de configuración. </summary>
      <returns>El objeto de configuración para el tipo de entidad especificado.</returns>
      <typeparam name="TEntityType">El tipo que se va a registrar o configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el generador de modelos especificado es igual al generador de modelos actual.</summary>
      <returns>true si el generador de modelos especificado es igual al generador de modelos actual; de lo contrario, false.</returns>
      <param name="obj">El generador de modelos que se va a comparar con el objeto actual. </param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>Devuelve la función hash para el generador de modelos especificado.</summary>
      <returns>La función hash para el generador de modelos especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>Obtiene el tipo para el generador de modelos actual.</summary>
      <returns>El tipo para el generador de modelos actual.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>Excluye un tipo del modelo. Se utiliza para quitar del modelo los tipos que se agregaron por convención durante la detección del modelo inicial. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.DbModelBuilder" />, de modo que se puedan encadenar varias llamadas.</returns>
      <typeparam name="T">El tipo que se va a excluir.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Excluye un tipo o tipos del modelo. Se utiliza para quitar del modelo los tipos que se agregaron por convención durante la detección del modelo inicial. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.DbModelBuilder" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="types">Los tipos que se van a excluir del modelo.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>Devuelve una representación de cadena del generador de modelos.</summary>
      <returns>Una representación de cadena del generador de modelos.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>Un valor de esta enumeración se puede proporcionar directamente a la clase <see cref="T:System.Data.Entity.DbModelBuilder" /> o se puede utilizar en el objeto <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> aplicado a una clase derivada de <see cref="T:System.Data.Entity.DbContext" />. El valor utilizado define qué versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> debe utilizarse al crear un modelo de código. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>Indica que debe utilizarse la versión más reciente de las convenciones de <see cref="T:System.Data.Entity.DbContext" /> y <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>Indica que debe usarse la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> proporcionada con Entity Framework v4.1. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>Indica que debe usarse la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> proporcionada con Entity Framework v5.0 cuando se debe usar la compatibilidad con .Net Framework 4. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>Indica que debe usarse la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> proporcionada con Entity Framework v5.0. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>Este atributo se puede aplicar a una clase derivada de <see cref="T:System.Data.Entity.DbContext" /> para establecer qué versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> deben utilizarse al crear un modelo de código. Vea la enumeración de <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> para obtener detalles acerca de las versiones de <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />. </summary>
      <param name="version">La versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> que se va a utilizar.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>Obtiene la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <returns>La versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>Representa un conjunto de entidades que se usa para realizar operaciones de creación, lectura, actualización y eliminación. Una versión no genérica de <see cref="T:System.Data.Entity.DbSet`1" /> que se puede usar cuando el tipo de entidad no se conoce en tiempo de compilación. </summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>Agrega la entidad determinada al contexto con estado <see cref="F:System.Data.EntityState.Added" />. Cuando se guardan los cambios, las entidades con estados Added se insertan en la base de datos. Una vez guardados los cambios, el estado del objeto cambia a <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Entidad.</returns>
      <param name="entity">Entidad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>Adjunta la entidad determinada al contexto en el <see cref="F:System.Data.EntityState.Unchanged" /></summary>
      <returns>Entidad.</returns>
      <param name="entity">Entidad que se va a adjuntar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.DbSet`1" /> genérico equivalente. </summary>
      <returns>El objeto de conjunto genérico.</returns>
      <typeparam name="TEntity">El tipo base del objeto que se va a convertir en el objeto de conjunto genérico.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto. Esta instancia no se agrega ni se adjunta al conjunto. La instancia devuelta será un proxy si el contexto subyacente se configura para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy. </summary>
      <returns>La instancia de la entidad, que puede ser un proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto o para un tipo derivado del tipo de este conjunto. Esta instancia no se agrega ni se adjunta al conjunto. La instancia devuelta será un proxy si el contexto subyacente se configura para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy. </summary>
      <returns>La instancia de la entidad, que puede ser un proxy. </returns>
      <param name="derivedEntityType">El tipo de entidad derivada.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el conjunto especificado es igual al conjunto actual.</summary>
      <returns>true si el conjunto especificado es igual al conjunto actual; en caso contrario, false.</returns>
      <param name="obj">Conjunto que se va a comparar con el conjunto actual. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>Usa el valor de clave principal para intentar buscar una entidad para la que el contexto esté realizando un seguimiento. Si la entidad no se encuentra en el contexto, se ejecutará una consulta y se evaluará con respecto a los datos en el origen de datos; se devolverá NULL si la entidad no se encuentra en el contexto o en el origen de datos. Tenga en cuenta que el método Find devuelve entidades que se han agregado al contexto pero que no se han guardado aún en la base de datos.</summary>
      <returns>Entidad encontrada o NULL.</returns>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>Devuelve la función hash para el conjunto especificado.</summary>
      <returns>La función hash para el conjunto especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>Obtiene el tipo del conjunto actual.</summary>
      <returns>El tipo del conjunto actual.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>Devuelve <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que representa entidades del conjunto a las que el contexto está realizando un seguimiento en un momento determinado y que no se han marcado como eliminadas. Cuando se obtiene acceso a la propiedad Local nunca se envía una consulta a la base de datos. Esta propiedad se usa generalmente una vez se ha ejecutado una consulta.</summary>
      <returns>Vista local.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>Marca la entidad concreta como <see cref="F:System.Data.EntityState.Deleted" />. Cuando se guardan los cambios, se elimina la entidad de la base de datos. La entidad debe existir en el contexto con otro estado antes de que se llame a este método. </summary>
      <returns>La entidad.</returns>
      <param name="entity">Entidad que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>Crea una consulta SQL sin formato que devolverá entidades de este conjunto. De forma predeterminada, el contexto realiza el seguimiento de las entidades devueltas; esto se puede cambiar mediante una llamada a AsNoTracking en el objeto <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> que devuelve este método. </summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> que ejecutará la consulta cuando se enumere.</returns>
      <param name="sql">Cadena de consulta SQL.</param>
      <param name="parameters">Los parámetros que se van a aplicar a la cadena de consulta SQL.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>Representa un conjunto de entidades con tipo que se usa para realizar operaciones de creación, lectura, actualización y eliminación. DbSet no se puede construir públicamente, solo se puede crear desde una instancia de <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <typeparam name="TEntity">Tipo que define el conjunto. El tipo puede ser un tipo derivado o un tipo base.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>Agrega la entidad determinada al contexto con estado <see cref="F:System.Data.EntityState.Added" />. Cuando se guardan los cambios, las entidades con estados Added se insertan en la base de datos. Una vez guardados los cambios, el estado del objeto cambia a <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Devuelve <see cref="{0}" />.</returns>
      <param name="entity">Entidad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>Adjunta la entidad determinada al contexto en el <see cref="F:System.Data.EntityState.Unchanged" /></summary>
      <returns>Devuelve <see cref="{0}" />.</returns>
      <param name="entity">Entidad que se va a adjuntar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto o para un tipo derivado del tipo de este conjunto. Esta instancia no se agrega ni se adjunta al conjunto. La instancia devuelta será un proxy si el contexto subyacente se configura para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy. </summary>
      <returns>Devuelve <see cref="{0}" />.</returns>
      <typeparam name="TDerivedEntity">Tipo que define el conjunto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto. Esta instancia no se agrega ni se adjunta al conjunto. La instancia devuelta será un proxy si el contexto subyacente se configura para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy. </summary>
      <returns>Devuelve <see cref="{0}" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto especificado es igual al conjunto actual.</summary>
      <returns>true si el conjunto especificado es igual al conjunto actual; de lo contrario, false.</returns>
      <param name="obj">Conjunto que se va a comparar con el conjunto actual. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>Usa el valor de clave principal para intentar buscar una entidad para la que el contexto esté realizando un seguimiento. Si la entidad no se encuentra en el contexto, se ejecutará una consulta y se evaluará con respecto a los datos en el origen de datos; se devolverá NULL si la entidad no se encuentra en el contexto o en el origen de datos. Tenga en cuenta que el método Find devuelve entidades que se han agregado al contexto pero que no se han guardado aún en la base de datos.</summary>
      <returns>Devuelve <see cref="T:System.Boolean" />.</returns>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>Devuelve la función hash para el conjunto especificado.</summary>
      <returns>La función hash para el conjunto especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>Obtiene el tipo del conjunto actual.</summary>
      <returns>El tipo del conjunto actual.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>Devuelve <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que representa entidades del conjunto a las que el contexto está realizando un seguimiento en un momento determinado y que no se han marcado como eliminadas. Cuando se obtiene acceso a la propiedad Local nunca se envía una consulta a la base de datos. Esta propiedad se usa generalmente una vez se ha ejecutado una consulta.</summary>
      <returns>Vista local.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.DbSet" /> no genérico equivalente.</summary>
      <returns>Devuelve el objeto de conjunto no genérico <see cref="T:System.Data.Entity.DbSet" />.</returns>
      <param name="entry">La entrada para la que se va a devolver el objeto <see cref="T:System.Data.Entity.DbSet" /> no genérico equivalente.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>Marca la entidad concreta como <see cref="F:System.Data.EntityState.Deleted" />. Cuando se guardan los cambios, se elimina la entidad de la base de datos. La entidad debe existir en el contexto con otro estado antes de que se llame a este método. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.DbSet" />.</returns>
      <param name="entity">Entidad que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>Crea una consulta SQL sin formato que devolverá entidades de este conjunto. De forma predeterminada, el contexto realiza el seguimiento de las entidades devueltas; esto se puede cambiar mediante una llamada a AsNoTracking en el objeto <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> que devuelve este método. </summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> que ejecutará la consulta cuando se enumere.</returns>
      <param name="sql">Cadena de consulta SQL.</param>
      <param name="parameters">Las entidades devueltas siempre son del tipo de este conjunto y nunca de un tipo derivado. Si la tabla o tablas consultadas pueden contener datos para otros tipos de entidad, la consulta SQL se debe escribir correctamente para asegurarse de que solo se devuelven entidades del tipo correcto.Los parámetros que se van a aplicar a la cadena de consulta SQL.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>Una implementación de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> que siempre volverá a crear y, opcionalmente, volverá a inicializar la base de datos con datos la primera vez que se utiliza un contexto en el dominio de aplicación. Para inicializar la base de datos, se ha de crear una clase derivada y reemplazar el método Seed. </summary>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>Ejecuta la estrategia para inicializar la base de datos para el contexto determinado. </summary>
      <param name="context">Contexto.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>Cuando se reemplaza, agregará datos al contexto para la inicialización.  La implementación predeterminada no hace nada. </summary>
      <param name="context">Contexto que se va a inicializar.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>Una implementación de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> que eliminará, volverá a crear y, opcionalmente, volverá a inicializar la base de datos con datos solo si el modelo ha cambiado desde que se creó la base de datos.  Esto se logra escribiendo un hash del modelo de almacén en la base de datos cuando se crea y comparando después ese hash con uno generado a partir del modelo actual. Para inicializar la base de datos, se ha de crear una clase derivada y reemplazar el método Seed. </summary>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>Ejecuta la estrategia para inicializar la base de datos para el contexto determinado. </summary>
      <param name="context">Contexto.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>Un que se debe reemplazar para agregar realmente datos al contexto para la inicialización.  La implementación predeterminada no hace nada. </summary>
      <param name="context">Contexto que se va a inicializar.</param>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>Define un método para el inicializador de base de datos.</summary>
      <typeparam name="TContext">Tipo del contexto.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información acerca de la covariante y la contravariante, vea.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>Ejecuta la estrategia para inicializar la base de datos para el contexto determinado. </summary>
      <param name="context">Contexto.</param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>Representa la colección de todas las entidades en el contexto, o que se pueden consultar en la base de datos, de un tipo determinado. <see cref="T:System.Data.Entity.DbSet" /> es una implementación concreta de <see cref="T:System.Data.Entity.IDbSet`1" />. </summary>
      <typeparam name="TEntity">Tipo que define el conjunto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>Agrega la entidad determinada al contexto con estado <see cref="F:System.Data.EntityState.Added" />. Cuando se guardan los cambios, las entidades con estados Added se insertan en la base de datos. Una vez guardados los cambios, el estado del objeto cambia a <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Devuelve la entidad.</returns>
      <param name="entity">Entidad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>Adjunta la entidad determinada al contexto en el <see cref="F:System.Data.EntityState.Unchanged" /></summary>
      <returns>Devuelve la entidad.</returns>
      <param name="entity">Entidad que se va a adjuntar.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto. Esta instancia no se agrega ni se adjunta al conjunto. La instancia devuelta será un proxy si el contexto subyacente se configura para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy. </summary>
      <returns>Devuelve la instancia de la entidad, que puede ser un proxy. </returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto o para un tipo derivado del tipo de este conjunto. Esta instancia no se agrega ni se adjunta al conjunto. La instancia devuelta será un proxy si el contexto subyacente se configura para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy. </summary>
      <returns>Devuelve la instancia de la entidad, que puede ser un proxy.</returns>
      <typeparam name="TDerivedEntity">El tipo de entidad que se va a crear.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>Usa el valor de clave principal para intentar buscar una entidad para la que el contexto esté realizando un seguimiento. Si la entidad no se encuentra en el contexto, se ejecutará una consulta y se evaluará con respecto a los datos en el origen de datos; se devolverá NULL si la entidad no se encuentra en el contexto o en el origen de datos. Tenga en cuenta que el método Find devuelve entidades que se han agregado al contexto pero que no se han guardado aún en la base de datos.</summary>
      <returns>Devuelve la entidad buscada o NULL.</returns>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>Devuelve <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que representa entidades del conjunto a las que el contexto está realizando un seguimiento en un momento determinado y que no se han marcado como eliminadas. Cuando se obtiene acceso a la propiedad Local nunca se envía una consulta a la base de datos. Esta propiedad se usa generalmente una vez se ha ejecutado una consulta.</summary>
      <returns>Vista local.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>Marca la entidad concreta como <see cref="F:System.Data.EntityState.Deleted" />. Cuando se guardan los cambios, se elimina la entidad de la base de datos. La entidad debe existir en el contexto con otro estado antes de que se llame a este método. </summary>
      <returns>Devuelve la entidad.</returns>
      <param name="entity">Entidad que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Implementación de IDatabaseInitializer que usará migraciones de Code First para actualizar la base de datos según la última migración.</summary>
      <typeparam name="TContext"></typeparam>
      <typeparam name="TMigrationsConfiguration"></typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary> Inicializa una nueva instancia de la clase MigrateDatabaseToLatestVersion.  </summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary> Inicializa una nueva instancia de la clase MigrateDatabaseToLatestVersion que usará una cadena de conexión específica del archivo de configuración para conectarse a la base de datos con el fin de realizar la migración. </summary>
      <param name="connectionStringName">Nombre de cadena de conexión que se va a usar para la migración.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>Ejecuta la estrategia para inicializar la base de datos para el contexto determinado.</summary>
      <param name="context">Contexto.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>Se devuelve por el método ChangeTracker de <see cref="T:System.Data.Entity.DbContext" /> para proporcionar acceso a las características del contexto relacionadas con el seguimiento de cambios de entidades. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>Detecta los cambios realizados en las propiedades y relaciones de entidades POCO.  Observe que algunos tipos de entidades (como los proxy y las entidades que realizan un seguimiento de cambios que derivan de <see cref="T:System.Data.Objects.DataClasses.EntityObject" />) notifican automáticamente los cambios y no suele ser necesario realizar una llamada a este método para estos tipos de entidades. Observe también que este método suele ser invocado automáticamente por muchos de los métodos de <see cref="T:System.Data.Entity.DbContext" /> y sus clases relacionadas, por lo que no es habitual que sea necesario invocarlo explícitamente. Sin embargo, puede ser deseable, normalmente por razones de rendimiento, desactivar la llamada automática a este método utilizando la marca AutoDetectChangesEnabled de <see cref="P:System.Data.Entity.DbContext.Configuration" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>Obtiene objetos <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> para todas las entidades de las que este contexto realiza un seguimiento. </summary>
      <returns>Las entradas.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>Obtiene objetos <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> para todas las entidades del tipo determinado de las que este contexto realiza un seguimiento. </summary>
      <returns>Las entradas.</returns>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el seguimiento especificado es igual al seguimiento actual.</summary>
      <returns>true si el seguimiento especificado es igual al seguimiento actual; en caso contrario, false.</returns>
      <param name="obj">Seguimiento que va a compararse con el objeto actual. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>Devuelve la función hash para el seguimiento especificado.</summary>
      <returns>La función hash para el seguimiento especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>Obtiene el tipo del seguimiento actual.</summary>
      <returns>El tipo del seguimiento actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>Devuelve una representación de cadena del seguimiento.</summary>
      <returns>Una representación de cadena del seguimiento.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> genérico equivalente. </summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TElement">Tipo del elemento de colección.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>Obtiene o establece el valor actual de la propiedad de navegación.  El valor actual es la entidad a que hace referencia la propiedad de navegación. </summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> al que pertenece esta propiedad de navegación. </summary>
      <returns>Una entrada para la entidad que posee esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>Obtiene un valor que indica si la colección de entidades se ha cargado desde la base de datos. </summary>
      <returns>true si la colección se ha cargado; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>Carga la colección de entidades desde la base de datos. Observe que las entidades que ya existen en el contexto no se sobrescriben con valores de la base de datos. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>Obtiene el nombre de la propiedad. </summary>
      <returns>El nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>Devuelve la consulta que se utilizaría para cargar esta colección desde la base de datos. La consulta devuelta se puede modificar utilizando LINQ para realizar el filtrado u operaciones en la base de datos, como realizar el recuento del número de entidades de la colección en la base de datos sin cargarlas realmente. </summary>
      <returns>Una consulta para la colección.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>Las instancias de esta clase se devuelven desde el método <see cref="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)" /> de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y permiten la realización de operaciones tales como la operación de carga en las propiedades de navegación de colección de la entidad. </summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TElement">Tipo del elemento de la colección de entidades.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>Obtiene o establece el valor actual de la propiedad de navegación.  El valor actual es la entidad a que hace referencia la propiedad de navegación. </summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> al que pertenece esta propiedad de navegación. </summary>
      <returns>Una entrada para la entidad que posee esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>Obtiene un valor que indica si la colección de entidades se ha cargado desde la base de datos. </summary>
      <returns>true si la colección se ha cargado; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>Carga la colección de entidades desde la base de datos. Observe que las entidades que ya existen en el contexto no se sobrescriben con valores de la base de datos. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>Obtiene el nombre de la propiedad. </summary>
      <returns>El nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> no genérica para la propiedad de navegación representada por este objeto. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.</returns>
      <param name="entry">Entrada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>Devuelve la consulta que se utilizaría para cargar esta colección desde la base de datos. La consulta devuelta se puede modificar utilizando LINQ para realizar el filtrado u operaciones en la base de datos, como realizar el recuento del número de entidades de la colección en la base de datos sin cargarlas realmente. </summary>
      <returns>Una consulta para la colección.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>Una representación inmutable de un modelo de Entity Data Model (EDM) que se puede utilizar para crear un objeto <see cref="T:System.Data.Objects.ObjectContext" /> o se puede pasar al constructor de un objeto <see cref="T:System.Data.Entity.DbContext" />.  Para aumentar el rendimiento, las instancias de este tipo deben almacenarse en memoria caché y volver a utilizarse para crear contextos.  </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>Crea una instancia de <see cref="T:System.Data.Objects.ObjectContext" /> o una clase derivada de ObjectContext. Observe que se puede crear una instancia de DbContext en su lugar utilizando el constructor DbContext adecuado. Si se utiliza un objeto ObjectContext derivado, debe tener un constructor público con un solo parámetro EntityConnection. El objeto ObjectContext creado utiliza la conexión pasada, pero no es propiedad del contexto.  El autor de la llamada debe eliminar la conexión una vez eliminado el contexto. </summary>
      <returns>Devuelve el contexto.</returns>
      <param name="existingConnection">Conexión existente con una base de datos para ser utilizada por el contexto.</param>
      <typeparam name="TContext">El tipo de contexto que se va a crear.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> genérico equivalente. </summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TComplexProperty">Tipo de la propiedad compleja.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja anidada de esta propiedad. </summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>Obtiene un objeto que representa una propiedad anidada de esta propiedad. Este método se puede utilizar para propiedades escalares o complejas. </summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>Las instancias de esta clase se devuelven desde el método ComplexProperty de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y permiten el acceso al estado de una propiedad compleja. </summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TComplexProperty">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Obtiene un objeto que representa una propiedad compleja anidada de esta propiedad. </summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="property">Expresión que representa la propiedad anidada.</param>
      <typeparam name="TNestedComplexProperty">Tipo de la propiedad anidada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja anidada de esta propiedad. </summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja anidada de esta propiedad. </summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
      <typeparam name="TNestedComplexProperty">Tipo de la propiedad anidada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> no genérica para la propiedad representada por este objeto.</summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</returns>
      <param name="entry">Entrada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Obtiene un objeto que representa una propiedad anidada de esta propiedad. Este método se puede utilizar para propiedades escalares o complejas. </summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="property">Expresión que representa la propiedad anidada.</param>
      <typeparam name="TNestedProperty">Tipo de la propiedad anidada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>Obtiene un objeto que representa una propiedad anidada de esta propiedad. Este método se puede utilizar para propiedades escalares o complejas. </summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
      <typeparam name="TNestedProperty">Tipo de la propiedad anidada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>Obtiene un objeto que representa una propiedad anidada de esta propiedad. Este método se puede utilizar para propiedades escalares o complejas. </summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>Representa información sobre una conexión de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>Crea una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> que representa una conexión que se especifica en el archivo de configuración de la aplicación.</summary>
      <param name="connectionName">Nombre de la cadena de conexión en la configuración de la aplicación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>Crea una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> según una cadena de conexión.</summary>
      <param name="connectionString">Nombre de cadena de conexión que se va a usar para la conexión.</param>
      <param name="providerInvariantName">Nombre del proveedor que se va a usar para la conexión. Use 'System.Data.SqlClient' para SQL Server.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>Indica si el objeto especificado es igual al objeto actual.</summary>
      <returns>true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para esta instancia.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>Tipo de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>Describe el origen de la cadena de la conexión de la base de datos asociada a un objeto <see cref="T:System.Data.Entity.DbContext" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>La cadena de conexión se creó mediante convención.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>La cadena de conexión se leyó a partir de la configuración externa.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>La cadena de conexión se específico explícitamente en tiempo de ejecución.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>     La cadena de conexión se reemplazó por la información sobre la conexión que se proporcionó a DbContextInfo.  </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>Se devuelve por el método Configuration de <see cref="T:System.Data.Entity.DbContext" /> para proporcionar acceso a las opciones de configuración para el contexto. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>Obtiene o establece un valor que indica si la detección automática de cambios en la configuración está habilitada.</summary>
      <returns>true si la detección automática de cambios en la configuración está habilitada; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la configuración especificada es igual a la configuración actual.</summary>
      <returns>true si la configuración especificada es igual a la configuración actual; en caso contrario, false.</returns>
      <param name="obj">Configuración que se compara con el objeto actual. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>Devuelve la función hash para la configuración especificada.</summary>
      <returns>La función hash para la configuración especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>Obtiene el tipo de la configuración actual.</summary>
      <returns>El tipo de la configuración actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>Obtiene o establece un valor que indica si está habilitada la carga diferida de relaciones expuestas como propiedades de navegación.  La carga diferida está habilitada de forma predeterminada. </summary>
      <returns>true si la carga diferida está habilitada; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>Obtiene o establece un valor que indica si el marco creará o no instancias de clases de proxy generadas dinámicamente cada vez que se cree una instancia de un tipo de entidad. Observe que aunque la creación de proxy esté habilitada con esta marca, las instancias de proxy solo se crearán para los tipos de entidad que cumplan los requisitos para utilizarse como proxy. La creación de proxy está habilitada de forma predeterminada. </summary>
      <returns>true si la creación de proxy está habilitada; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>Devuelve una representación de cadena de la configuración.</summary>
      <returns>Una representación de cadena de la configuración.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>Obtiene o establece un valor que indica si las entidades de las que se realiza un seguimiento se deben validar automáticamente cuando se invoca el método <see cref="M:System.Data.Entity.DbContext.SaveChanges" />. El valor predeterminado es true. </summary>
      <returns>true si las entidades de las que se realiza un seguimiento se deben validar automáticamente; de lo contrario, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>Proporciona información de tiempo de ejecución sobre un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>Inicializa una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado. Se puede suministrar un objeto de configuración externo (por ejemplo app.config o web.config) y se usará durante la resolución de la cadena de conexión. Esto incluye buscar cadenas de conexión y entradas de DefaultConnectionFactory. </summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objeto que representa el archivo de configuración.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Inicializa una nueva instancia que representa un <see cref="T:System.Data.Entity.DbContext" /> determinado compatible con una base de datos específica.     Se puede suministrar un objeto de configuración externo (por ejemplo app.config o web.config) y se usará durante resolución de la cadena de conexión. Esto incluye buscar cadenas de conexión y entradas de DefaultConnectionFactory. </summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objeto que representa el archivo de configuración.</param>
      <param name="connectionInfo">Información de conexión que se va a usar para la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Inicializa una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado. Se pueden proporcionar listas externas de cadenas de conexión y se usarán durante una resolución de cadenas de conexión en lugar de cualquier cadena de conexión que se hubiera especificado en archivos de configuración externos.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionStringSettings">Colección de cadenas de conexión.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Inicializa una nueva instancia que representa un <see cref="T:System.Data.Entity.DbContext" /> determinado compatible con una base de datos específica. </summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionInfo">Información de conexión que se va a usar para la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Inicializa una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado. Se puede proporcionar un objeto <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> para reemplazar al proveedor predeterminado concreto que se usó en la construcción del modelo EDM subyacente.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="modelProviderInfo">Objeto <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> que especifica el proveedor de ADO.NET subyacente para el destino.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>Proveedor de ADO.ENT de la conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
      <returns>Nombre del proveedor de ADO.ENT de la conexión que usa el tipo subyacente.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>Obtiene o establece la cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
      <returns>Cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>Obtiene o establece el nombre de la cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
      <returns>Nombre de la cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>Obtiene o establece el origen de la cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
      <returns>Origen de la cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>Obtiene o establece el tipo de <see cref="T:System.Data.Entity.DbContext" /> concreto.</summary>
      <returns>Tipo de <see cref="T:System.Data.Entity.DbContext" /> concreto.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>Crea una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.</summary>
      <returns>Si se pueden crear instancias del tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente, se devuelve una nueva instancia; de lo contrario, se devuelve NULL.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>Obtiene o establece un valor que indica si se puede crear el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
      <returns>true si la se puede crear el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>Obtiene o establece el modelo para un contexto derivado que se ha inicializado.</summary>
      <returns>Modelo para un contexto derivado que se ha inicializado.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> genérica del tipo genérico determinado para la entidad de la que se realiza un seguimiento representada por este objeto. El tipo de la entidad de la que se realiza un seguimiento debe ser compatible con el tipo genérico; de lo contrario, se producirá una excepción. </summary>
      <returns>Una versión genérica.</returns>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación de colección de esta entidad en una colección de entidades relacionadas. </summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja de esta entidad. </summary>
      <returns>Un objeto que representa la propiedad compleja.</returns>
      <param name="propertyName">Nombre de la propiedad compleja.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>Obtiene los valores de propiedad actuales para la entidad a la que se realiza un seguimiento representada por este objeto. </summary>
      <returns>Los valores actuales.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>Obtiene la entidad. </summary>
      <returns>La entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Determina si el objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> especificado es igual a esta instancia. Dos instancias de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> se consideran iguales si ambas son entradas para la misma entidad en el mismo objeto <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si el objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> especificado es igual a esta instancia; de lo contrario, false. </returns>
      <param name="other">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado es igual a esta instancia. Dos instancias de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> se consideran iguales si ambas son entradas para la misma entidad en el mismo objeto <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si el objeto especificado es igual a esta instancia; en caso contrario, false. </returns>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>Consulta la base de datos en busca de copias de los valores de la entidad a la que se realiza un seguimiento que existen actualmente en la base de datos. El cambio de los valores en el diccionario devuelto no actualizarán los valores en la base de datos. Si no se encuentra la entidad en la base de datos, se devuelve null. </summary>
      <returns>Los valores de almacén.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>Devuelve un código hash para esta instancia. </summary>
      <returns>Un código hash para esta instancia adecuado para utilizarlo en algoritmos de hash y estructuras de datos como una tabla hash.  </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>Obtiene el tipo de la entrada de la entidad de base de datos actual.</summary>
      <returns>El tipo de la entrada de la entidad de base de datos actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>Valida esta instancia de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> y devuelve el resultado de la validación. </summary>
      <returns>El resultado de la validación de la entidad. Posiblemente null si se reemplaza el método <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" />. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>Obtiene un objeto que representa un miembro de la entidad.  El tipo en tiempo de ejecución del objeto devuelto variará dependiendo de qué tipo de miembro se solicita.  Los tipos de miembro admitidos actualmente compatibles y sus tipos de valor devuelto son Propiedad de navegación de referencia (<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />), Propiedad de navegación de colección (<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />), Propiedad primitiva/escalar (<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />) y Propiedad compleja (<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />). </summary>
      <returns>Un objeto que representa el miembro.</returns>
      <param name="propertyName">Nombre del miembro.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>Obtiene los valores de propiedad originales para la entidad a la que se realiza un seguimiento representada por este objeto. Los valores originales son normalmente los valores de propiedad de la entidad que existían cuando se realizó la última consulta de la base de datos. </summary>
      <returns>Los valores originales.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>Obtiene un objeto que representa una propiedad escalar o compleja de esta entidad. </summary>
      <returns>Un objeto que representa la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación (es decir, no de colección) de referencia de esta entidad en otra entidad. </summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>Recarga la entidad de la base de datos sobrescribiendo los valores de propiedad con valores de la base de datos. La entidad estará en estado Unchanged después de llamar a este método. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>Obtiene o establece el estado de la entidad. </summary>
      <returns>El estado.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>Devuelve una representación de cadena de la entrada de la entidad de base de datos.</summary>
      <returns>Una representación de cadena de la entrada de la entidad de base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>Las instancias de esta clase proporcionan acceso a información sobre, y el control de, entidades de las que el objeto <see cref="T:System.Data.Entity.DbContext" /> realiza un seguimiento.  Use los métodos Entity o Entities del contexto para obtener objetos de este tipo. </summary>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Obtiene un objeto que representa la propiedad de navegación de colección de esta entidad en una colección de entidades relacionadas. </summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Expresión que representa la propiedad de navegación.</param>
      <typeparam name="TElement">Tipo de los elementos de la colección.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación de colección de esta entidad en una colección de entidades relacionadas. </summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
      <typeparam name="TElement">Tipo de los elementos de la colección.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación de colección de esta entidad en una colección de entidades relacionadas. </summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtiene un objeto que representa una propiedad compleja de esta entidad. </summary>
      <returns>Un objeto que representa la propiedad compleja.</returns>
      <param name="property">Propiedad.</param>
      <typeparam name="TComplexProperty">Tipo de la propiedad compleja.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja de esta entidad. </summary>
      <returns>Un objeto que representa la propiedad compleja.</returns>
      <param name="propertyName">Nombre de la propiedad compleja.</param>
      <typeparam name="TComplexProperty">Tipo de la propiedad compleja.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja de esta entidad. </summary>
      <returns>Un objeto que representa la propiedad compleja.</returns>
      <param name="propertyName">Nombre de la propiedad compleja.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>Obtiene los valores de propiedad actuales para la entidad a la que se realiza un seguimiento representada por este objeto. </summary>
      <returns>Los valores actuales.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>Obtiene la entidad. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>Determina si el objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> especificado es igual a esta instancia. Dos instancias de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> se consideran iguales si ambas son entradas para la misma entidad en el mismo objeto <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si el objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> especificado es igual a esta instancia; de lo contrario, false. </returns>
      <param name="other">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado es igual a esta instancia. Dos instancias de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> se consideran iguales si ambas son entradas para la misma entidad en el mismo objeto <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si el objeto especificado es igual a esta instancia; en caso contrario, false. </returns>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>Consulta la base de datos en busca de copias de los valores de la entidad a la que se realiza un seguimiento que existen actualmente en la base de datos. El cambio de los valores en el diccionario devuelto no actualizarán los valores en la base de datos. Si la entidad no se encuentra en la base de datos, se devuelve null. </summary>
      <returns>Los valores de almacén.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>Devuelve un código hash para esta instancia.</summary>
      <returns>Un código hash para esta instancia adecuado para utilizarlo en algoritmos de hash y estructuras de datos como una tabla hash.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>Obtiene el tipo de la entidad de base de datos actual.</summary>
      <returns>El tipo de la entidad de base de datos actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>Valida esta instancia de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y devuelve el resultado de la validación. </summary>
      <returns>El resultado de la validación de la entidad. Posiblemente null si se reemplaza el método <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" />. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>Obtiene un objeto que representa un miembro de la entidad.  El tipo en tiempo de ejecución del objeto devuelto variará dependiendo de qué tipo de miembro se solicita.  Los tipos de miembro admitidos actualmente y sus tipos de valor devuelto son Propiedad de navegación de referencia: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />. Propiedad de navegación de colección: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />. Propiedad primitiva/escalar: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />. Propiedad compleja: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />. </summary>
      <returns>El miembro de la entidad. </returns>
      <param name="propertyName">Nombre del miembro.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>Obtiene un objeto que representa un miembro de la entidad.  El tipo en tiempo de ejecución del objeto devuelto variará dependiendo de qué tipo de miembro se solicita.  Los tipos de miembro admitidos actualmente y sus tipos de valor devuelto son Propiedad de navegación de referencia: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />. Propiedad de navegación de colección: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. Propiedad primitiva/escalar: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />. Propiedad compleja: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />. </summary>
      <returns>Un objeto que representa el miembro.</returns>
      <param name="propertyName">Nombre del miembro.</param>
      <typeparam name="TMember">Tipo del miembro.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> no genérica para la entidad de la que se realiza un seguimiento representada por este objeto. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
      <param name="entry">Entrada.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>Obtiene los valores de propiedad originales para la entidad a la que se realiza un seguimiento representada por este objeto. Los valores originales son normalmente los valores de propiedad de la entidad que existían cuando se realizó la última consulta de la base de datos. </summary>
      <returns>Los valores originales.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtiene un objeto que representa una propiedad escalar o compleja de esta entidad. </summary>
      <returns>Un objeto que representa la propiedad.</returns>
      <param name="property">Propiedad.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>Obtiene un objeto que representa una propiedad escalar o compleja de esta entidad. </summary>
      <returns>Un objeto que representa la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>Obtiene un objeto que representa una propiedad escalar o compleja de esta entidad. </summary>
      <returns>Un objeto que representa la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtiene un objeto que representa la propiedad de navegación (es decir, no de colección) de referencia de esta entidad en otra entidad. </summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Expresión que representa la propiedad de navegación.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación (no de colección) de referencia de esta entidad en otra entidad. </summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación (es decir, no de colección) de referencia de esta entidad en otra entidad. </summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>Recarga la entidad de la base de datos sobrescribiendo los valores de propiedad con valores de la base de datos. La entidad estará en estado Unchanged después de llamar a este método. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>Obtiene o establece el estado de la entidad. </summary>
      <returns>El estado.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>Devuelve una representación de cadena de los valores de la entidad de base de datos.</summary>
      <returns>Una representación de cadena de los valores de la entidad de base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Esta es una clase base abstracta que se utiliza para representar una propiedad escalar o compleja o una propiedad de navegación de una entidad.  Las propiedades escalares y complejas utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />, las propiedades de navegación de referencia utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> y las propiedades de navegación de colección utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> genérico equivalente. </summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>Obtiene o establece el valor actual de esta propiedad. </summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> al que pertenece este miembro. </summary>
      <returns>Una entrada para la entidad a la que pertenece este miembro.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la entrada especificada es igual a la consulta actual.</summary>
      <returns>true si la entrada especificada es igual a la entrada actual; de lo contrario, false.</returns>
      <param name="obj">Entrada que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>Devuelve la función hash para la entrada especificada.</summary>
      <returns>La función hash para la entrada especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>Obtiene el tipo de la entrada actual.</summary>
      <returns>El tipo de la entrada actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>Valida esta propiedad. </summary>
      <returns>Una colección de objetos <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Nunca es null. Si la entidad es válida, la colección estará vacía. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>Obtiene el nombre de la propiedad. </summary>
      <returns>El nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>Devuelve una representación de cadena de los valores de propiedad de base de datos.</summary>
      <returns>Una representación de cadena de los valores de propiedad de base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>Una clase base abstracta que se utiliza para representar una propiedad escalar o compleja o una propiedad de navegación de una entidad.  Las propiedades escalares y complejas utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />, las propiedades de navegación de referencia utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> y las propiedades de navegación de colección utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. </summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TProperty">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>Obtiene o establece el valor actual de esta propiedad. </summary>
      <returns>Devuelve <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> al que pertenece este miembro. </summary>
      <returns>Una entrada para la entidad a la que pertenece este miembro.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la consulta especificada es igual a la consulta actual.</summary>
      <returns>true si la consulta especificada es igual a la consulta actual; de lo contrario, false.</returns>
      <param name="obj">Consulta que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>Devuelve la función hash para la consulta especificada.</summary>
      <returns>La función hash para la consulta especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>Obtiene el tipo de la consulta actual.</summary>
      <returns>El tipo de la consulta actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>Valida esta propiedad. </summary>
      <returns>Una colección de objetos <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Nunca es null. Si la entidad es válida, la colección estará vacía. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>Obtiene el nombre de la entrada de miembro de base de datos.</summary>
      <returns>El nombre de la entrada de miembro de base de datos.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> no genérica para la propiedad representada por este objeto. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</returns>
      <param name="entry">Entrada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>Devuelve una representación de cadena de los valores de propiedad de base de datos.</summary>
      <returns>Una representación de cadena de los valores de propiedad de base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>Representa un Entity Data Model (EDM) creado por el objeto <see cref="T:System.Data.Entity.DbModelBuilder" />. El método <see cref="M:System.Data.Entity.Infrastructure.DbModel.Compile" /> se puede utilizar para convertir de una representación de EDM a un objeto <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> que es una instantánea compilada del modelo apropiado para el almacenamiento en memoria caché y la creación de instancias de <see cref="T:System.Data.Entity.DbContext" /> o <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> para este modo que es una instantánea compilada apropiada para el almacenamiento en memoria caché y la creación de instancias de <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>El modelo compilado.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> genérico equivalente. </summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>Obtiene o establece el valor actual de esta propiedad. </summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>Objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> al que pertenece esta propiedad. </summary>
      <returns>Una entrada para la entidad que posee esta propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>Obtiene o establece un valor que indica si se ha modificado el valor de esta propiedad desde que se cargó de la base de datos. </summary>
      <returns>true si esta instancia se modifica; de lo contrario, false. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>Obtiene el nombre de la propiedad. </summary>
      <returns>El nombre de la propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>Obtiene o establece el valor original de esta propiedad. </summary>
      <returns>El valor original.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> de la propiedad para la que esta es una propiedad anidada. Este método devolverá solo una entrada que no sea null para las propiedades de objetos complejos; de lo contrario, devolverá null para las propiedades de la propia entidad. </summary>
      <returns>Una entrada para la propiedad compleja primaria o null si se trata de una propiedad de entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>Las instancias de esta clase se devuelven desde el método Property de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y permiten el acceso al estado de la propiedad compleja o escalar. </summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>Obtiene o establece el valor actual de esta propiedad. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>Objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> al que pertenece esta propiedad. </summary>
      <returns>Una entrada para la entidad que posee esta propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>Obtiene o establece un valor que indica si se ha modificado el valor de esta propiedad desde que se cargó de la base de datos. </summary>
      <returns>true si esta instancia se modifica; de lo contrario, false. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>Obtiene el nombre de la propiedad. </summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> no genérica para la propiedad representada por este objeto. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.</returns>
      <param name="entry">Entrada.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>Obtiene o establece el valor original de esta propiedad. </summary>
      <returns>Devuelve <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> de la propiedad para la que esta es una propiedad anidada. Este método devolverá solo una entrada que no sea null para las propiedades de objetos complejos; devolverá null para las propiedades de la propia entidad. </summary>
      <returns>Una entrada para la propiedad compleja primaria o null si se trata de una propiedad de entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>Una colección de todas las propiedades para una entidad u objeto complejo subyacentes. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>Crea un nuevo diccionario que contiene copias de todas las propiedades de este diccionario. Los cambios realizados en el nuevo diccionario no se reflejarán en este diccionario y viceversa. </summary>
      <returns>Un clon de este diccionario.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor especificado es igual al valor actual.</summary>
      <returns>true si el valor especificado es igual al valor actual; en caso contrario, false.</returns>
      <param name="obj">Valor que se compara con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>Devuelve la función hash para el valor especificado.</summary>
      <returns>La función hash para el valor especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>Obtiene el tipo del valor actual.</summary>
      <returns>El tipo del valor actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>Obtiene el valor de la propiedad como cuando se utiliza el captador de propiedades indizadas pero escrito con el tipo del parámetro genérico.  Esto es especialmente útil con diccionarios anidados para evitar la escritura de expresiones con numerosas conversiones. </summary>
      <returns>Devuelve el valor de <see cref="T:System.Type" /> de la propiedad especificada mediante <paramref name="propertyName" />.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
      <typeparam name="TValue">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>Obtiene o establece el valor de la propiedad con el nombre de propiedad especificado. El valor puede ser una instancia anidada de esta clase. </summary>
      <returns>El valor de la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad que se va a recuperar.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>Obtiene el conjunto de nombres de todas las propiedades en este diccionario como un conjunto de solo lectura. </summary>
      <returns>Los nombres de propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>Establece los valores de este diccionario mediante la lectura de los valores de otro diccionario. El otro diccionario debe estar basado en el mismo tipo que este diccionario o en un tipo derivado del tipo de este diccionario. </summary>
      <param name="propertyValues">Diccionario cuyos valores se van a leer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>Establece los valores de este diccionario mediante la lectura de los valores del objeto determinado. El objeto determinado puede ser de cualquier tipo.  Se leerán las propiedades del objeto con un nombre que coincida con un nombre de propiedad en el diccionario y se pueda leer.  Se omitirán las demás propiedades.  Esto permite copiar las propiedades de objetos de transferencia de datos (DTO) simples. </summary>
      <param name="obj">Objeto cuyos valores se van a leer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>Crea un objeto del tipo subyacente para este diccionario y lo hidrata con valores de propiedad de este diccionario. </summary>
      <returns>Las propiedades de este diccionario copiadas en un nuevo objeto.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>Devuelve una representación de cadena de los valores de propiedad de base de datos.</summary>
      <returns>Una representación de cadena de los valores de propiedad de base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>Almacena información sobre un proveedor de bases de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />.</summary>
      <param name="providerInvariantName">El nombre invariable del proveedor que especifica la versión de SQL Server Compact Edition que se debe utilizar.</param>
      <param name="providerManifestToken">La información del token del manifiesto del proveedor en el elemento Schema.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>Obtiene el nombre invariable del proveedor que especifica la versión de SQL Server Compact Edition que se debe utilizar.</summary>
      <returns>El proveedor de datos del proveedor de bases de datos.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Obtiene la información del token del manifiesto del proveedor en el elemento Schema.</summary>
      <returns>El token del manifiesto.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>Representa una consulta de LINQ to Entities no genérico en un objeto <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en el objeto <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Una nueva consulta con NoTracking aplicado.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> genérico equivalente. </summary>
      <returns>El objeto de conjunto genérico.</returns>
      <typeparam name="TElement">Tipo de elemento para el que se creó la consulta.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>El tipo de elemento de IQueryable. </summary>
      <returns>El tipo de elemento.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la consulta especificada es igual a la consulta actual.</summary>
      <returns>true si la consulta especificada es igual a la consulta actual; de lo contrario, false.</returns>
      <param name="obj">Consulta que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>Devuelve la función hash para la consulta especificada.</summary>
      <returns>La función hash para la consulta especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>Obtiene el tipo de la consulta actual.</summary>
      <returns>Tipo de la consulta actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>Devuelve la consulta de LINQ to Entities no genérico incluido en un objeto <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>La consulta de LINQ incluido.</returns>
      <param name="path">La ruta de acceso de LINQ incluido.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtiene la enumeración de esta consulta que hace que se ejecute en el almacén.</summary>
      <returns>Un objeto <see cref="T:System.Collections.IEnumerator" /> para la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Devuelve false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>Produce una excepción que indica que no se admite el enlace directo a una consulta de almacén. </summary>
      <returns>Nunca devuelve resultados; siempre produce una excepción.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>Expresión LINQ de IQueryable.</summary>
      <returns>Devuelve <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>Proveedor de IQueryable.</summary>
      <returns>Devuelve <see cref="T:System.Linq.IQueryProvider" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>Devuelve una representación de tipo <see cref="T:System.String" /> de la consulta subyacente. </summary>
      <returns>La cadena de consulta. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>Representa una consulta de LINQ to Entities en un objeto <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <typeparam name="TResult">Tipo de entidad en que se realiza la consulta.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en el objeto <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Una nueva consulta con NoTracking aplicado.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la consulta especificada es igual a la consulta actual.</summary>
      <returns>true si la consulta especificada es igual a la consulta actual; de lo contrario, false.</returns>
      <param name="obj">Consulta que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>Devuelve la función hash para la consulta especificada.</summary>
      <returns>La función hash para la consulta especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>Obtiene el tipo de la consulta actual.</summary>
      <returns>Tipo de la consulta actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>Devuelve la consulta de LINQ to Entities incluida en un objeto <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>El LINQ incluido.</returns>
      <param name="path">La ruta de acceso de LINQ incluido.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> no genérica para esta consulta. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />.</returns>
      <param name="entry">Entrada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Obtiene la enumeración de esta consulta que hace que se ejecute en el almacén.</summary>
      <returns>Devuelve un objeto <see cref="T:System.Collections.Generic.IEnumerator`1" /> para la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtiene la enumeración de esta consulta que hace que se ejecute en el almacén.</summary>
      <returns>Devuelve un objeto <see cref="T:System.Collections.IEnumerator" /> para la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Devuelve false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Produce una excepción que indica que no se admite el enlace directo a una consulta de almacén. </summary>
      <returns>Nunca devuelve resultados; siempre produce una excepción.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Tipo de elemento de IQueryable.</summary>
      <returns>Devuelve <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>Expresión LINQ de IQueryable.</summary>
      <returns>Devuelve <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>Proveedor de IQueryable.</summary>
      <returns>Devuelve <see cref="T:System.Linq.IQueryProvider" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>Devuelve una representación de tipo <see cref="T:System.String" /> de la consulta subyacente. </summary>
      <returns>La cadena de consulta. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> genérico equivalente. </summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>Obtiene o establece el valor actual de la propiedad de navegación.  El valor actual es la entidad a que hace referencia la propiedad de navegación. </summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> al que pertenece esta propiedad de navegación. </summary>
      <returns>Una entrada para la entidad que posee esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>Obtiene un valor que indica si la entidad se ha cargado desde la base de datos. </summary>
      <returns>true si se carga la entidad; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>Carga la entidad desde la base de datos. Tenga en cuenta que si la entidad ya existe en el contexto, no se sobrescribirá con valores de la base de datos. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>Obtiene el nombre de la propiedad. </summary>
      <returns>El nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>Devuelve la consulta que se utilizaría para cargar esta entidad desde la base de datos. La consulta devuelta se puede modificar utilizando LINQ para realizar un filtrado u operaciones en la base de datos. </summary>
      <returns>Una consulta para la entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>Las instancias de esta clase se devuelven desde el método Reference de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y permiten la realización de operaciones tales como la operación de carga en las propiedades de navegación de referencia de la entidad. </summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>Obtiene o establece el valor actual de la propiedad de navegación.  El valor actual es la entidad a que hace referencia la propiedad de navegación. </summary>
      <returns>Devuelve <see cref="T:System.Linq.IQueryable`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> al que pertenece esta propiedad de navegación. </summary>
      <returns>Una entrada para la entidad que posee esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>Obtiene un valor que indica si la entidad se ha cargado desde la base de datos. </summary>
      <returns>true si se carga la entidad; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>Carga la entidad desde la base de datos. Si la entidad ya existe en el contexto, no se sobrescribirá con valores de la base de datos. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>Obtiene el nombre de la propiedad. </summary>
      <returns>El nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary> Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> no genérica para la propiedad de navegación representada por este objeto. </summary>
      <returns>Devuelve <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.</returns>
      <param name="entry">Entrada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>Devuelve la consulta que se utilizaría para cargar esta entidad desde la base de datos. La consulta devuelta se puede modificar utilizando LINQ para realizar un filtrado u operaciones en la base de datos. </summary>
      <returns>Una consulta para la entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>Representa una consulta SQL para entidades que se crean a partir de un objeto <see cref="T:System.Data.Entity.DbContext" /> y se ejecuta utilizando la conexión desde ese contexto. Las instancias de esta clase se obtienen de la instancia de <see cref="T:System.Data.Entity.DbSet" /> para el tipo de entidad. La consulta no se ejecuta cuando se crea este objeto; se ejecuta cada vez que se enumera, por ejemplo, utilizando foreach. Las consultas SQL para elementos que no son entidades se crean utilizando el objeto <see cref="P:System.Data.Entity.DbContext.Database" />. Vea <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> en el caso de una versión genérica de esta clase. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>Devuelve una nueva consulta donde el objeto <see cref="T:System.Data.Entity.DbContext" /> asociado no realizará el seguimiento de los resultados de la misma. </summary>
      <returns>Una nueva consulta en la que se ha aplicado el proceso de no realizar un seguimiento.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la consulta especificada es igual a la consulta actual.</summary>
      <returns>true si la consulta especificada es igual a la consulta actual; de lo contrario, false.</returns>
      <param name="obj">Consulta que se va a comparar con el objeto actual. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
      <summary>Ejecuta la consulta y devuelve un enumerador para los elementos. </summary>
      <returns>Un objeto <see cref="T:System.Collections.IEnumerator" /> que se puede usar para recorrer en iteración los elementos. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>Devuelve la función hash para la consulta especificada.</summary>
      <returns>La función hash para la consulta especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>Obtiene el tipo de la consulta actual.</summary>
      <returns>Tipo de la consulta actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Devuelve false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>Produce una excepción que indica que no se admite el enlace directo a una consulta de almacén.</summary>
      <returns>Nunca devuelve resultados; siempre produce una excepción.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>Devuelve un objeto <see cref="T:System.String" /> que contiene la cadena de SQL que se estableció cuando se creó la consulta.  No se incluyen los parámetros. </summary>
      <returns>Un objeto <see cref="T:System.String" /> que representa esta instancia. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>Representa una consulta SQL para entidades que se crean a partir de un objeto <see cref="T:System.Data.Entity.DbContext" /> y que se ejecuta utilizando la conexión desde ese contexto. Las instancias de esta clase se obtienen de la instancia de <see cref="T:System.Data.Entity.DbSet`1" /> para el tipo de entidad. La consulta no se ejecuta cuando se crea este objeto; se ejecuta cada vez que se enumera, por ejemplo, utilizando foreach. Las consultas SQL para elementos que no son entidades se crean utilizando el objeto <see cref="P:System.Data.Entity.DbContext.Database" />. Vea <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> en el caso de una versión no genérica de esta clase. </summary>
      <typeparam name="TEntity">La entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>Devuelve una nueva consulta donde el objeto <see cref="T:System.Data.Entity.DbContext" /> asociado no realizará el seguimiento de los resultados de la misma. </summary>
      <returns>Una nueva consulta en la que se ha aplicado el proceso de no realizar un seguimiento.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la consulta especificada es igual a la consulta actual.</summary>
      <returns>true si la consulta especificada es igual a la consulta actual; de lo contrario, false.</returns>
      <param name="obj">Consulta que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
      <summary>Ejecuta la consulta y devuelve un enumerador para los elementos. </summary>
      <returns>El enumerador para los elementos.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>Devuelve la función hash para la consulta especificada.</summary>
      <returns>La función hash para la consulta especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>Obtiene el tipo de la consulta actual.</summary>
      <returns>Tipo de la consulta actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Ejecuta la consulta y devuelve un enumerador para los elementos.</summary>
      <returns>Un objeto <see cref="T:System.Collections.IEnumerator" /> que se puede usar para recorrer en iteración los elementos.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Devuelve false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Produce una excepción que indica que no se admite el enlace directo a una consulta de almacén.</summary>
      <returns>Nunca devuelve resultados; siempre produce una excepción.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>Devuelve un objeto <see cref="T:System.String" /> que contiene la cadena de SQL que se estableció cuando se creó la consulta.  No se incluyen los parámetros. </summary>
      <returns> Un objeto <see cref="T:System.String" /> que representa esta instancia. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>Excepción producida por <see cref="T:System.Data.Entity.DbContext" /> cuando el comportamiento esperado es que SaveChanges para una entidad diese lugar a una actualización de base de datos pero, de hecho, ninguna fila de la base de datos se ha visto afectada.  Esto normalmente indica que la base de datos se ha actualizado simultáneamente y un token de simultaneidad que se esperaba que coincidiera no ha coincidido realmente. Las entradas de estado a que hace referencia esta excepción no se serializan debido a la seguridad y el acceso a las entradas de estado después de la serialización devolverá null. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Mensaje.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>Representa las excepciones producidas durante la actualización de una base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Mensaje.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>Obtiene objetos <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> que representan las entidades que no se pudieron guardar en la base de datos. </summary>
      <returns>Las entidades que no se pudieron guardar en la base de datos. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>Representa una entidad utilizada para almacenar los metadatos sobre un EDM en la base de datos. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>Obtiene o establece el identificador de la entidad de metadatos que actualmente siempre es 1. </summary>
      <returns>El identificador.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>Obtiene o establece el hash de modelo que se utiliza para comprobar si el modelo ha cambiado desde que la base de datos se creó a partir de él. </summary>
      <returns>El hash de modelo.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>Intenta obtener el hash de modelo calculado mediante Code First para el contexto determinado. Este método devolverá null si el contexto no se está utilizando en modo Code First. </summary>
      <returns>La cadena de hash.</returns>
      <param name="context">Contexto.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Contiene los métodos utilizados para tener acceso al Entity Data Model creado por Code First en formato EDMX. Estos métodos se utilizan normalmente para la depuración cuando es necesario examinar el modelo que Code First crea internamente. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>Utiliza Code First con el contexto determinado y escribe el Entity Data Model resultante en el sistema de escritura determinado en formato EDMX.  Este método solo se puede utilizar con instancias del contexto que utilizan Code First y crean el modelo internamente.  El método no se puede utilizar para los contextos creados utilizando Database First o Model First, para los contextos creados utilizando un objeto <see cref="T:System.Data.Objects.ObjectContext" /> preexistente o para los contextos creados utilizando un objeto <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> preexistente. </summary>
      <param name="context">Contexto.</param>
      <param name="writer">Sistema de escritura.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>Escribe el Entity Data Model representado por el objeto <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> dado en el sistema de escritura dado en formato EDMX. </summary>
      <param name="model">Objeto que representa el EDM.</param>
      <param name="writer">Sistema de escritura.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>Las implementaciones de esta interfaz se utilizan para crear objetos DbConnection para un tipo de servidor de bases de datos basándose en un nombre de base de datos determinado.   Se establece una instancia en la clase <see cref="T:System.Data.Entity.Database" /> para que todos los objetos <see cref="T:System.Data.Entity.DbContext" /> se creen sin información de conexión o simplemente con un nombre de base de datos o una cadena de conexión para utilizar un determinado tipo de servidor de bases de datos de forma predeterminada. Se proporcionan dos implementaciones de esta interfaz: <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> que se utiliza para crear conexiones con Microsoft SQL Server, incluidas las ediciones EXPRESS, y <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> que se utiliza para crear conexiones con Microsoft SQL Server Compact Edition. Se pueden agregar otras implementaciones para otros servidores de bases de datos según sea necesario. Las implementaciones deben ser seguras para subprocesos o inmutables, ya que varios subprocesos pueden tener acceso a ellas al mismo tiempo. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>Crea una conexión basándose en el nombre de base de datos o la cadena de conexión determinados. </summary>
      <returns>Un objeto DbConnectioninicializado.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>Generador para crear instancias de <see cref="T:System.Data.Entity.DbContext" /> derivadas. Implemente esta interfaz para habilitar los servicios de tiempo de diseño y la creación de instancias para tipos de contexto que no disponen de un constructor público predeterminado. Puede crear instancias de <see cref="T:System.Data.Entity.DbContext" /> derivadas en tiempo de diseño para habilitar usos de tiempo de diseño específicos como, por ejemplo, la representación de modelos y la generación de DDL. Los servicios de tiempo de diseño pueden detectar automáticamente implementaciones de esta interfaz que se encuentren en el mismo ensamblado que el tipo de <see cref="T:System.Data.Entity.DbContext" /> derivado.</summary>
      <typeparam name="TContext">Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo más derivado. Para obtener más información acerca de la covariante y la contravariante, vea.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>Crea una nueva instancia de un tipo de <see cref="T:System.Data.Entity.DbContext" /> derivado.</summary>
      <returns>Instancia de <see cref="TContext" /></returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>Esta convención de <see cref="T:System.Data.Entity.DbModelBuilder" /> hace que <see cref="T:System.Data.Entity.DbModelBuilder" /> incluya metadatos sobre el modelo cuando se crea el modelo. Cuando <see cref="T:System.Data.Entity.DbContext" /> crea un modelo por convención, agrega esta convención a la lista de las utilizadas por el objeto <see cref="T:System.Data.Entity.DbModelBuilder" />.  Esto hará que los metadatos del modelo se escriban en la base de datos si se utiliza el modelo <see cref="T:System.Data.Entity.DbContext" /> para crear la base de datos. Esto se puede utilizar después para comprobar si el modelo ha cambiado desde la última vez que se utilizó en la base de datos.  Esta convención se puede quitar de la lista de convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> reemplazando el método <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>Interfaz implementada por los objetos que pueden proporcionar una instancia de <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />. La clase <see cref="T:System.Data.Entity.DbContext" /> implementa esta interfaz para proporcionar acceso al contexto de objeto subyacente. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>Obtiene el contexto del objeto. </summary>
      <returns>El contexto del objeto.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>     Las instancias de esta clase se usan para crear objetos DbConnection para SQL Server LocalDb basándose en un nombre de base de datos o en una cadena de conexión determinados. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>     Crea una instancia nueva del generador de conexión para la versión particular de LocalDb.     Para SQL Server 2012 LocalDb, use "v11.0". </summary>
      <param name="localDbVersion">Versión de LocalDb que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>     Crea una instancia nueva del generador de conexión para la versión particular de LocalDb.     Para SQL Server 2012 LocalDb, use "v11.0".      </summary>
      <param name="localDbVersion">Versión de LocalDb que se va a usar.</param>
      <param name="baseConnectionString">     Cadena de conexión que se va a usar para proporcionar opciones a la base de datos además de "Initial Catalog", "Data Source" y "AttachDbFilename".     "Initial Catalog" y "AttachDbFilename" se antepondrán a esta cadena basándose en el nombre de la base de datos cuando se llame a CreateConnection.     "Data Source" se establecerá según el argumento LocalDbVersion. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>     Cadena de conexión que se va a usar para proporcionar opciones a la base de datos además de "Initial Catalog", "Data Source" y "AttachDbFilename".     "Initial Catalog" y "AttachDbFilename" se antepondrán a esta cadena basándose en el nombre de la base de datos cuando se llame a CreateConnection.     "Data Source" se establecerá según el argumento LocalDbVersion.     El valor predeterminado es 'Integrated Security=True; MultipleActiveResultSets=True;'. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>     Crea una conexión para SQL Server LocalDb según el nombre de base de datos o la cadena de conexión determinados.     Si la cadena determinada contiene un carácter "=", se trata como una cadena de conexión completa; de lo contrario, se trata como un nombre de base de datos solamente. </summary>
      <returns>Un objeto DbConnectioninicializado.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>Esta convención de <see cref="T:System.Data.Entity.DbModelBuilder" /> utiliza el nombre de la clase <see cref="T:System.Data.Entity.DbContext" /> derivada como contenedor para el modelo conceptual creado mediante Code First. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>Esta convención de <see cref="T:System.Data.Entity.DbModelBuilder" /> utiliza el espacio de nombres de la clase <see cref="T:System.Data.Entity.DbContext" /> derivada como espacio de nombres del modelo conceptual creado mediante Code First. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>Las instancias de esta clase se utilizan internamente para crear expresiones constantes que se insertan en el árbol de expresiones para reemplazar las referencias a <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> y <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />. </summary>
      <typeparam name="TElement">Tipo del elemento.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>La propiedad pública esperada en el árbol de expresiones LINQ.</summary>
      <returns>Devuelve <see cref="T:System.Data.Objects.ObjectQuery`1" />. La consulta.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>Las instancias de esta clase se utilizan para crear objetos DbConnection para SQL Server Compact Edition basándose en un nombre de base de datos o una cadena de conexión determinados. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary> Crea un nuevo generador de conexión con valor empty (valor predeterminado) para las propiedades <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> y <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" />. </summary>
      <param name="providerInvariantName">El nombre invariable del proveedor que especifica la versión de SQL Server Compact Edition que se debe utilizar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>Crea un nuevo generador de conexión con las propiedades <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> y <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> determinadas. </summary>
      <param name="providerInvariantName">El nombre invariable del proveedor que especifica la versión de SQL Server Compact Edition que se debe utilizar. </param>
      <param name="databaseDirectory">Ruta de acceso que se ha de anteponer al nombre de la base de datos que formará el nombre de archivo utilizado por SQL Server Compact Edition cuando cree o lea el archivo de base de datos. Se creará una cadena vacía cuando SQL Server Compact Edition utilice su ubicación predeterminada como ubicación del archivo de base de datos. </param>
      <param name="baseConnectionString">Cadena de conexión que se utiliza para las opciones a la base de datos distintas de "Origen de datos". El origen de datos se antepondrá a esta cadena basándose en el nombre de la base de datos cuando se llame a CreateConnection. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>Cadena de conexión que se utiliza para las opciones a la base de datos distintas de "Origen de datos". El origen de datos se antepondrá a esta cadena basándose en el nombre de la base de datos cuando se llame a CreateConnection. El valor predeterminado es la cadena vacía, lo que significa que no se utilizarán otras opciones. </summary>
      <returns>La cadena de conexión utilizada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>Crea una conexión para SQL Server Compact Edition basándose en el nombre de base de datos o la cadena de conexión determinados. Si la cadena determinada contiene un carácter "=", se trata como una cadena de conexión completa; de lo contrario, se trata como un nombre de base de datos solamente. </summary>
      <returns>Un objeto DbConnectioninicializado.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>Ruta de acceso que se ha de anteponer al nombre de la base de datos que formará el nombre de archivo utilizado por SQL Server Compact Edition cuando cree o lea el archivo de base de datos. El valor predeterminado es "|DataDirectory|", lo que significa que el archivo se colocará en el directorio de datos designado. </summary>
      <returns>La ruta de acceso para la base de datos.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>El nombre invariable del proveedor que especifica la versión de SQL Server Compact Edition que se debe utilizar. </summary>
      <returns>El nombre invariable del proveedor.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary> Las instancias de esta clase se utilizan para crear objetos DbConnection para SQL Server basándose en un nombre de base de datos o una cadena de conexión determinados. De forma predeterminada, la conexión se realiza con '.\SQLEXPRESS'.  Esto se puede cambiar modificando la cadena de conexión base al crear una instancia del generador. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>Crea un nuevo generador de conexión con una propiedad BaseConnectionString predeterminada de 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>Crea un nuevo generador de conexión con la propiedad BaseConnectionString determinada. </summary>
      <param name="baseConnectionString">Cadena de conexión que se utiliza para las opciones a la base de datos distintas de "Catálogo inicial". El "Catálogo inicial" se antepondrá a esta cadena basándose en el nombre de la base de datos cuando se llame a CreateConnection. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>Cadena de conexión que se utiliza para las opciones a la base de datos distintas de "Catálogo inicial". El "Catálogo inicial" se antepondrá a esta cadena basándose en el nombre de la base de datos cuando se llame a CreateConnection. El valor predeterminado es 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'. </summary>
      <returns>La cadena de conexión.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>Crea una conexión para SQL Server basándose en el nombre de base de datos o la cadena de conexión determinados. Si la cadena determinada contiene un carácter "=", se trata como una cadena de conexión completa; de lo contrario, se trata como un nombre de base de datos solamente. </summary>
      <returns>Un objeto DbConnectioninicializado.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>Este atributo se puede aplicar a una clase <see cref="T:System.Data.Entity.DbContext" /> derivada completa o a las propiedades <see cref="T:System.Data.Entity.IDbSet`1" /> o <see cref="T:System.Data.Entity.DbSet`1" /> individuales en esa clase.  Cuando se aplica a las propiedades <see cref="T:System.Data.Entity.IDbSet`1" /> o <see cref="T:System.Data.Entity.DbSet`1" /> detectadas seguirá estando incluido en el modelo pero no se inicializará automáticamente. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>La excepción que se produce cuando un contexto se genera a partir de las plantillas de <see cref="T:System.Data.Entity.DbContext" /> en modo Database First o Model First y se utiliza después en modo Code First. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="info">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="message">Mensaje.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>Representa la clase base para las migraciones basadas en código.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     Agrega una operación para agregar una columna a una tabla existente. </summary>
      <param name="table">     Nombre de la tabla a la que se va a agregar la columna.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="name">     Nombre de la columna que se va a agregar. </param>
      <param name="columnAction">     Acción que especifica la columna que se va a agregar. Es decir, c =&amp;gt; c.Int(nullable: false, defaultValue: 3).</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     Agrega una operación para crear una restricción de clave externa nueva. </summary>
      <param name="dependentTable">     Tabla que contiene la columna de clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="dependentColumn">Columna de clave externa.</param>
      <param name="principalTable">     Tabla que contiene la columna a la que hace referencia esta clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="principalColumn">     Columna a la que hace referencia esta clave externa.      Si no se proporcionan valores, se hará referencia a la clave principal de la tabla principal. </param>
      <param name="cascadeDelete">     Valor que indica si la eliminación en cascada se debe configurar para la relación de clave externa.     Si no se suministran valores, se anulará la eliminación de cascada. </param>
      <param name="name">     Nombre de la restricción de la clave externa de la base de datos.     Si no se proporcionan valores, se generará un nombre único. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     Agrega una operación para crear una restricción de clave externa nueva. </summary>
      <param name="dependentTable">     Tabla que contiene columnas de clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="dependentColumns">Columnas de clave externa.</param>
      <param name="principalTable">     Tabla que contiene las columnas a las que hace referencia esta clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="principalColumns">     Columnas a las que hace referencia esta clave externa.      Si no se proporcionan valores, se hará referencia a la clave principal de la tabla principal. </param>
      <param name="cascadeDelete">     Valor que indica si la eliminación en cascada se debe configurar para la relación de clave externa.     Si no se suministran valores, se anulará la eliminación de cascada. </param>
      <param name="name">     Nombre de la restricción de la clave externa de la base de datos.     Si no se proporcionan valores, se generará un nombre único. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
      <summary>     Agrega una operación para crear una clave principal nueva. </summary>
      <param name="table">     Tabla que contiene la columna de clave principal.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="column">Columna de clave principal.</param>
      <param name="name">     Nombre de la clave principal en la base de datos.     Si no se proporcionan valores, se generará un nombre único. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
      <summary>     Agrega una operación para crear una clave principal nueva según múltiples columnas. </summary>
      <param name="table">     Tabla que contiene las columnas de clave principal.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="columns">Columnas de clave principal.</param>
      <param name="name">     Nombre de la clave principal en la base de datos.     Si no se proporcionan valores, se generará un nombre único. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     Agrega una operación para modificar la definición de una columna existente. </summary>
      <param name="table">     El nombre de la tabla donde se encuentra la columna. El nombre de esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="name">Nombre de la columna que se va a cambiar.</param>
      <param name="columnAction">     Acción que especifica la definición nueva de la columna. Es decir, c =&amp;gt; c.String(nullable: false, defaultValue: "none").</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     Agrega una operación para crear un índice en una única columna. </summary>
      <param name="table">     Nombre de la tabla donde se va a crear el índice.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="column">Nombre de la columna donde se va a crear el índice.</param>
      <param name="unique">     Valor que indica si se trata de un índice único.     Si no se proporcionan valores, se creará un índice que no sea único. </param>
      <param name="name">     Nombre que se va a usar para el índice en la base de datos.     Si no se proporcionan valores, se generará un nombre único. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     Agrega una operación para crear un índice en múltiples columnas. </summary>
      <param name="table">     Nombre de la tabla donde se va a crear el índice.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="columns">Nombre de las columnas donde se va a crear el índice.</param>
      <param name="unique">     Valor que indica si se trata de un índice único.     Si no se proporcionan valores, se creará un índice que no sea único. </param>
      <param name="name">     Nombre que se va a usar para el índice en la base de datos.     Si no se proporcionan valores, se generará un nombre único. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>     Agrega una operación para crear una tabla nueva. </summary>
      <returns>Objeto que permite realizar una configuración más avanzada de la operación de creación de tablas.</returns>
      <param name="name">Nombre de la tabla. El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="columnsAction">     Acción que especifica las columnas que se van a incluir en la tabla. Es decir, t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
      <typeparam name="TColumns">     Columnas en esta operación de creación de tablas.      No es necesario especificar este tipo, se deducirá del parámetro columnsAction que facilite. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>     Operaciones que se van a realizar durante el proceso de degradar. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>     Agrega una operación para quitar una columna existente. </summary>
      <param name="table">     Nombre de la tabla de la que se va a quitar la columna.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>     Agrega una operación para quitar una restricción de clave externa según su nombre. </summary>
      <param name="dependentTable">     Tabla que contiene la columna de clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="name">Nombre de la restricción de la clave externa de la base de datos.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>     Agrega una operación para quitar una restricción de clave externa según la columna a la que se destina. </summary>
      <param name="dependentTable">     Tabla que contiene la columna de clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="dependentColumn">Columna de clave externa.</param>
      <param name="principalTable">     Tabla que contiene la columna a la que hace referencia esta clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="principalColumn">Columnas a las que hace referencia esta clave externa.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>     Agrega una operación para quitar una restricción de clave externa según las columnas a las que se destina. </summary>
      <param name="dependentTable">     Tabla que contiene columnas de clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="dependentColumns">Columnas de clave externa.</param>
      <param name="principalTable">     Tabla que contiene las columnas a las que hace referencia esta clave externa.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>     Agrega una operación para quitar un índice según su nombre. </summary>
      <param name="table">     Nombre de la tabla de la que se va a quitar el índice.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="name">Nombre del índice que se va a quitar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>     Agrega una operación para quitar un índice según las columnas a las que se destina. </summary>
      <param name="table">     Nombre de la tabla de la que se va a quitar el índice.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="columns">Nombre de las columnas a las que se destina el índice.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>     Agrega una operación para quitar una clave primaria existente que se creó con el nombre predeterminado. </summary>
      <param name="table">     Tabla que contiene la columna de clave principal.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>     Agrega una operación para quitar una clave primaria que no tiene el nombre predeterminado. </summary>
      <param name="table">     Tabla que contiene la columna de clave principal.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="name">Nombre de la clave principal que se va a quitar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>     Agrega una operación para quitar una tabla. </summary>
      <param name="name">     Nombre de la tabla que se va a quitar.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>Determina si esta instancia es equivalente a un objeto específico.</summary>
      <returns>true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>Obtiene los datos, para un parámetro o una columna, como el tipo especificado.</summary>
      <returns>Código hash para el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>Devuelve el tipo en tiempo de ejecución de la instancia actual.</summary>
      <returns>Instancia de Type que representa el tipo exacto en tiempo de ejecución de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>Crea una copia superficial del objeto actual.</summary>
      <returns>Copia superficial del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>     Agrega una operación para mover una tabla a un esquema nuevo. </summary>
      <param name="name">     Nombre de la tabla que se va a mover.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="newSchema">Esquema al que se va a mover la tabla.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>     Agrega una operación para cambiar el nombre a una columna. </summary>
      <param name="table">     Nombre de la tabla que contiene la columna a la que se va a cambiar el nombre.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="name">Nombre de la columna cuyo nombre se va a cambiar.</param>
      <param name="newName">Nuevo nombre para la columna.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>     Agrega una operación para cambiar el nombre a una tabla. Para cambiar el esquema de una tabla, use MoveTable.</summary>
      <param name="name">     Nombre de la tabla cuyo nombre se va a cambiar.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="newName">     Nuevo nombre para la tabla.     El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>     Agrega una operación para ejecutar un comando SQL. </summary>
      <param name="sql">SQL que se va a ejecutar.</param>
      <param name="suppressTransaction">     Valor que indica si el comando SQL se debe ejecutar fuera de la transacción que se está usando en el proceso de migración.     Si no se especifican valores, el comando SQL se ejecuta dentro de la transacción. </param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>     Operaciones que se van a realizar durante el proceso de actualizar. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>Configuración con relación al uso de las migraciones para un modelo determinado. Por lo general, creará una clase de configuración que se deriva de <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />, en lugar de usar esta clase.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>     Inicializa una nueva instancia de la clase DbMigrationsConfiguration. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>     Obtiene o establece un valor que indica si es aceptable la pérdida de datos durante una migración automática.     Si se establece en false, se producirá una excepción en caso de que se produzca una pérdida de datos por una migración automática. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>     Obtiene o establece un valor que indica si se pueden usar las migraciones cuando se migra la base de datos. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>     Obtiene o establece el generador de código que se va a usar cuando se aplican procesos de scaffolding a las migraciones. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>     Obtiene o establece el DbContext derivado que representa el modelo que ser va a migrar. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>     Obtiene el generador de SQL que se ha establecido para su uso con un proveedor de bases de datos determinado. </summary>
      <returns>Generador de SQL que se establece para el proveedor de bases de datos.</returns>
      <param name="providerInvariantName">Nombre del proveedor de bases de datos para el que se va a obtener el generador de SQL.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>     Obtiene o establece el ensamblado que contiene migraciones basadas en código. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>     Obtiene o establece el subdirectorio donde se almacenan las migraciones basadas en código. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>     Obtiene o establece el espacio de nombres que se usa para las migraciones basadas en código. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>     Agrega un generador de SQL nuevo que se va a usar para un proveedor de bases de datos determinado. </summary>
      <param name="providerInvariantName">Nombre del proveedor de bases de datos para el que se va a establecer el generador de SQL.</param>
      <param name="migrationSqlGenerator">Generador de SQL que se va a usar.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>     Obtiene o establece un valor para reemplazar la conexión de la base de datos que se va a migrar. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>Representa la configuración con relación al uso de las migraciones para un modelo determinado.</summary>
      <typeparam name="TContext">Contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>     Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <returns>true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>Obtiene los datos, para un parámetro o una columna, como el tipo especificado.</summary>
      <returns>Código hash para el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>Devuelve el tipo en tiempo de ejecución de la instancia actual.</summary>
      <returns>Instancia de Type que representa el tipo exacto en tiempo de ejecución de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>Crea una copia superficial del objeto actual.</summary>
      <returns>Copia superficial del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>     Se ejecuta tras la actualización a la última migración con el fin de actualizar los datos de inicialización. </summary>
      <param name="context">Contexto que se va a usar para actualizar los datos de inicialización.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>Se usa para aplicar las migraciones existentes a una base de datos. Esta clase se puede usar para actualizar y degradar a cualquier migración determinada. Para aplicar procesos de scaffolding a las migraciones en función de los cambios del modelo, use <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>     Inicializa una nueva instancia de la clase DbMigrator. </summary>
      <param name="configuration">Configuración que se va a usar para el proceso de migración.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>     Obtiene la configuración que se va a usar para el proceso de migración. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>     Obtiene todas las migraciones que se han aplicado a la base de datos de destino. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>     Obtiene todas las migraciones que se definieron en el ensamblado de migraciones configurado. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>     Obtiene todas las migraciones que se definieron en el ensamblado, pero que no se han aplicado a la base de datos de destino. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>     Identificador de migración que representa el estado de la base de datos antes de la aplicación de migraciones. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>     Actualiza la base de datos de destino según una migración determinada. </summary>
      <param name="targetMigration">Migración según la cual se va a realizar la actualización o degradación.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
      <summary>Conjunto de métodos de extensión para <see cref="T:System.Data.Entity.IDbSet`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>Agrega o actualiza entidades según la clave cuando se llama a SaveChanges. Equivalente a una operación "upsert" a partir de terminología de base de datos. Este método puede resultar útil cuando se inicializan datos mediante migraciones.</summary>
      <param name="set">Objeto <see cref="T:System.Data.Entity.IDbSet`1" /> que se usa para realizar operaciones de creación, lectura, actualización y eliminación.</param>
      <param name="identifierExpression">Expresión que especifica las propiedades que se deben usar a la hora de determinar si se debe efectuar una operación de agregar o de actualización. </param>
      <param name="entities">Entidades que se van a agregar o actualizar.</param>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>Agrega o actualiza entidades según la clave cuando se llama a SaveChanges. Equivalente a una operación "upsert" a partir de terminología de base de datos. Este método puede resultar útil cuando se inicializan datos mediante migraciones.</summary>
      <param name="set">Objeto <see cref="T:System.Data.Entity.IDbSet`1" /> que se usa para realizar operaciones de creación, lectura, actualización y eliminación.</param>
      <param name="entities">Entidades que se van a agregar o actualizar.</param>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>Representa una clase de auxiliares que se usa para configurar una columna.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos binarios.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="maxLength">Longitud máxima permitida de los datos de matriz.</param>
      <param name="fixedLength">Valor que indica si todos los datos deben rellenarse hasta la longitud máxima.</param>
      <param name="isMaxLength">Valor que indica si se debe usar la longitud máxima que admite el proveedor de bases de datos.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="timestamp">Valor que indica si esta columna se debe configurar como marca de tiempo.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos Boolean.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos Byte.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos DateTime.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="precision">Precisión de la columna.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos DateTimeOffset.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="precision">Precisión de la columna.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una definición de columna para almacenar datos Decimal.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="precision">Precisión numérica de la columna.</param>
      <param name="scale">Escala numérica de la columna.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
      <param name="identity">Valor que indica si la base de datos va a generar valores para esta columna durante la operación de inserción.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos Double.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>Indica si el objeto especificado es igual al objeto actual.</summary>
      <returns>true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos de geografía.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos de geometría.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para esta instancia.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>Tipo de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos GUID.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos Integer.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos Long.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>Crea una copia superficial del objeto actual.</summary>
      <returns>Copia superficial del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos Short.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos Single.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos String.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="maxLength">Longitud máxima permitida para datos String.</param>
      <param name="fixedLength">Valor que indica si todos los datos deben rellenarse hasta la longitud máxima.</param>
      <param name="isMaxLength">Valor que indica si se debe usar la longitud máxima que admite el proveedor de bases de datos.</param>
      <param name="unicode">Valor que indica si la columna admite o no contenido Unicode.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
      <summary>Crea una definición de columna para almacenar datos Time.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna admite o no valores NULL.</param>
      <param name="precision">Precisión de la columna.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión de SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Clase auxiliar que se usa para realizar una configuración más avanzada a una tabla que se crea a partir de una llamada a CreateTable en <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <typeparam name="TColumns">Tipo para las columnas de esta tabla.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Builders.TableBuilder`1" />.</summary>
      <param name="createTableOperation">Operación de creación de tablas que se va seguir configurando.</param>
      <param name="migration">Migración de la tabla que se ha creado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>Especifica una restricción de clave externa que se va a crear en la tabla. </summary>
      <returns>La misma, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="principalTable">Nombre de la tabla a la que está destinada la restricción de clave externa.</param>
      <param name="dependentKeyExpression">Expresión lambda que representa las propiedades de la clave externa.      Si la clave externa se compone de varias propiedades, se ha de especificar un tipo anónimo que incluya las propiedades.</param>
      <param name="cascadeDelete">Valor que indica si la eliminación en cascada se debe configurar según la restricción de clave externa. </param>
      <param name="name">Nombre de esta restricción de clave externa. Si no se especifica ningún nombre, se calculará un nombre predeterminado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores. Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>Obtiene el código hash del actual objeto.</summary>
      <returns>Código hash para el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>Obtiene el tipo del objeto actual.</summary>
      <returns>Tipo MIME del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
      <summary>Especifica un índice que se va a crear en la tabla.</summary>
      <returns>La misma, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="indexExpression">Expresión lambda que representa la propiedad que se va a indexar.Si se deben indexar varias propiedades, se ha de especificar un tipo anónimo que incluya las propiedades.</param>
      <param name="unique">Valor que indica si se trata de un índice único.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores. Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>Crea una copia superficial del objeto actual.</summary>
      <returns>Copia superficial del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
      <summary>Especifica una clave principal para la tabla. </summary>
      <returns>La misma, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyExpression">Expresión lambda que representa la propiedad que se va a usar como clave principal. Si la clave principal se compone de varias propiedades, se ha de especificar un tipo anónimo que incluya las propiedades.</param>
      <param name="name">Nombre de la clave principal. Si se obtiene un valor NULL, se generará un nombre predeterminado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores. Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>Devuelve una representación en forma de cadena del objeto actual.</summary>
      <returns>Representación en forma de cadena del objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>Genera código C# para una migración basada en códigos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Byte" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Byte[]" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Genera el archivo de código primario que puede ver y editar el usuario. </summary>
      <returns>Código generado.</returns>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para especificar un conjunto de nombres de columna que usan una expresión lambda.</summary>
      <param name="columns">Columnas para las que se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Genera código para especificar la definición para un <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Definición de columna para la que se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="emitName">Valor que indica si incluir el nombre de la columna en la definición.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.DateTime" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Decimal" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Guid" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Int64" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>Genera código para especificar el valor predeterminado para una columna de tipo de datos desconocidos.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Single" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.String" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Genera el código subyacente del archivo con los metadatos de la migración.</summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Genera el código subyacente del archivo con los metadatos de la migración.</summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.TimeSpan" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>Cita un identificador mediante un escape apropiado para que se pueda almacenar en una cadena.</summary>
      <returns>Identificador citado.</returns>
      <param name="identifier">Identificador que se cita.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Quita cualquier carácter no válido del nombre de un artefacto de base de datos.</summary>
      <returns>Nombre habilitado.</returns>
      <param name="name">Nombre que se va a habilitar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Obtiene el nombre del tipo que se va a usar para una columna de un tipo de datos determinado.</summary>
      <returns>Nombre del tipo que se va a usar en una migración generada.</returns>
      <param name="primitiveTypeKind">Tipo de datos que se va a traducir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera el código de cierre para una clase que se inició con WriteClassStart.</summary>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Genera un espacio de nombres con instrucciones y definición de clase.</summary>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="base">Clase base para la clase generada.</param>
      <param name="designer">Valor que indica si esta clase se está generando para un archivo de código subyacente.</param>
      <param name="namespaces">Espacios de nombres para los que se van agregar directivas "using". Si es NULL, se usarán los espacios de nombre que se devuelven desde GetDefaultNamespaces.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera una propiedad para devolver el modelo de origen o de destino en el archivo subyacente de código.</summary>
      <param name="name">Nombre de la propiedad.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>Clase base para proveedores que generan código para migraciones basadas en código.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>     Genera el código que se debe agregar al proyecto de usuarios. </summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary> Obtiene el espacio de nombres predeterminado que debe generarse como directivas "using" o "Imports" para todo el código que se genere. </summary>
      <returns>Lista ordenada de nombres de espacios de nombres.</returns>
      <param name="designer">Valor que indica si esta clase se está generando para un archivo de código subyacente.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary> Obtiene el espacio de nombres predeterminado que debe generarse como directivas "using" o "Imports" para controlar el código que generaron las operaciones especificadas. </summary>
      <returns>Lista ordenada de nombres de espacios de nombres.</returns>
      <param name="operations">Operaciones para las que se va generar código.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>Realiza un proceso de scaffolding en migraciones basadas en código para aplicar los cambios de modelo pendientes a la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />. </summary>
      <param name="migrationsConfiguration">Configuración que se va a usar para el proceso de scaffolding.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary> Obtiene o establece el espacio de nombres que se usa en el código generado de la migración.  De forma predeterminada, es igual que MigrationsNamespace en el objeto de configuración de migraciones que se pasó al constructor. Para proyectos de VB.NET, deberá actualizarse para que se tenga en cuenta el espacio de nombres raíz del proyecto. </summary>
      <returns>Espacio de nombres que se usa en el código generado de la migración.  </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>     Realiza un proceso de scaffolding en una migración basada en código para aplicar los cambios de modelo pendientes a la base de datos. </summary>
      <returns>Migración scaffolded.</returns>
      <param name="migrationName">Nombre de cadena de conexión que se va a usar para la migración scaffolded.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>Realiza un proceso de scaffolding en una migración basada en código para aplicar los cambios de modelo pendientes a la base de datos.</summary>
      <returns>Migración scaffolded.</returns>
      <param name="migrationName">Nombre de cadena de conexión que se va a usar para la migración scaffolded.</param>
      <param name="ignoreChanges">true para excluir cambios de modelo; de lo contrario, es false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary> Realiza un proceso de scaffolding en la migración basada en código inicial correspondiente a un inicializador de bases de datos que se ejecutó anteriormente.</summary>
      <returns>Migración scaffolded.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>   Devuelve una migración basada en código que ha pasado por un proceso de scaffolding y que está lista para su escritura en un archivo.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>     Obtiene o establece el código de la migración scaffolded que se debe almacenar en un archivo de código subyacente. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>     Obtiene o establece el subdirectorio en el proyecto del usuario donde se debe guardar esta migración. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>     Obtiene o establecer el lenguaje de programación que se usa para esta migración.     Se usa normalmente para la extensión del archivo del código generado. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>     Obtiene o establece el identificador único para esta migración.     Se usa normalmente para el nombre del archivo del código generado. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>     Obtiene o establece el código de la migración scaffolded que puede editar el usuario. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
      <summary>Representa una excepción que se produjo mientras se ejecutaba una operación en otro AppDomain en la <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> con datos serializados.</summary>
      <param name="info">Datos serializados del objeto sobre la excepción producida.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> con un error, tipo de excepción interna y pila especificados.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción.</param>
      <param name="innerType">Tipo de la excepción que se produjo.</param>
      <param name="innerStackTrace">Seguimiento de la pila de la excepción que se produjo.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Rellena <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para serializar el objeto de destino.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se rellena con datos.</param>
      <param name="context">Destino para esta serialización.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
      <summary>Obtiene el seguimiento de la pila de la excepción que se produjo. </summary>
      <returns>Seguimiento de la pila de la excepción que se produjo.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
      <summary>Obtiene el tipo de la excepción que se produjo. </summary>
      <returns>Tipo de la excepción que se produjo.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Representa una clase auxiliar que usan las herramientas de tiempo de diseño para ejecutar comandos relacionados con migraciones que deben interactuar con una aplicación que se está editando en visual Studio.Dado que la aplicación se está editando, se deben cargar los ensamblados en un AppDomain diferente para garantizar que siempre está cargada la última versión. El archivo App/Web del proyecto de inicio también se copia con el fin de garantizar que se puede aplicar cualquier configuración.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />. </summary>
      <param name="assemblyName">Nombre del ensamblado que contiene la configuración de las migraciones que se va a usar. </param>
      <param name="configurationTypeName">Nombre completo del espacio de nombres de la configuración de las migraciones que se va a usar. </param>
      <param name="workingDirectory">Directorio de trabajo que contiene los ensamblados compilados. </param>
      <param name="configurationFilePath">Ruta de acceso para el archivo de configuración del proyecto de inicio. </param>
      <param name="dataDirectory">Ruta de acceso del directorio de datos de la aplicación del proyecto de inicio. Por lo general, el directorio App_Data para aplicaciones web o el directorio de trabajo para archivos ejecutables. </param>
      <param name="connectionStringInfo">Conexión a la base de datos que se va a migrar. Si se obtiene NULL, se usará la conexión predeterminada para el contexto. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>Libera todos los recursos que usa <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
      <param name="disposing">true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>Libera todos los recursos sin administrar que usa la fachada. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>Obtiene el nombre completo de todos los tipos que se derivan de <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Tipos de contexto encontrados.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>Obtiene una lista de todas las migraciones que se han aplicado a la base de datos. </summary>
      <returns>Identificadores de las migraciones aplicadas.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>Obtiene una lista de todas las migraciones que no se han aplicado a la base de datos. </summary>
      <returns>Identificadores de las migraciones pendientes.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>Obtiene o establece una acción que se va a ejecutar para registrar información. </summary>
      <returns>Acción que se va a ejecutar para registrar información.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>Obtiene o establece una acción que se va a ejecutar para registrar información detallada. </summary>
      <returns>Acción que se va a ejecutar para registrar información detallada.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>Obtiene o establece una acción que se va a ejecutar para registrar advertencias. </summary>
      <returns>Acción que se va a ejecutar para registrar advertencias.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>Realiza un proceso de scaffolding en una migración basada en código para aplicar los cambios de modelo pendientes.</summary>
      <returns>Migración scaffolded.</returns>
      <param name="migrationName">Nombre la migración generada.</param>
      <param name="language">Lenguaje de programación de la migración generada.</param>
      <param name="rootNamespace">Espacio de nombres raíz del proyecto al que se agregará la migración.</param>
      <param name="ignoreChanges">true para excluir cambios de modelo; de lo contrario, es false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>Realiza un proceso de scaffolding en la migración basada en código inicial correspondiente a un inicializador de bases de datos que se ejecutó anteriormente. </summary>
      <returns>Migración scaffolded.</returns>
      <param name="language">Lenguaje de programación de la migración generada.</param>
      <param name="rootNamespace">Espacio de nombres raíz del proyecto al que se agregará la migración.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>Genera un script SQL que se va a migrar entre dos migraciones. </summary>
      <returns>Script SQL generado.</returns>
      <param name="sourceMigration">Migración desde la que se va a realizar la migración. Si se obtiene NULL, se producirá un script para actualizar la base de datos actual. </param>
      <param name="targetMigration">Migración a la que se va a actualizar. Si se obtiene NULL, se producirá un script para actualizar a la última migración. </param>
      <param name="force">Valor que indica si es aceptable la pérdida de datos durante una migración automática.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>Actualiza la base de datos a la migración especificada. </summary>
      <param name="targetMigration">Identificador de la migración a la que se va a migrar. Si se obtiene NULL, se actualizará la base de datos a la migración más reciente. </param>
      <param name="force">Valor que indica si es aceptable la pérdida de datos durante una migración automática.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>Genera código de Visual Basic .Net para una migración basada en códigos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Byte" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Byte[]" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Genera el archivo de código primario que puede ver y editar el usuario.</summary>
      <returns>Código generado.</returns>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para especificar un conjunto de nombres de columna que usan una expresión lambda.</summary>
      <param name="columns">Columnas para las que se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />. </summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Genera código para especificar la definición para un <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />. </summary>
      <param name="column">Definición de columna para la que se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="emitName">Valor que indica si incluir el nombre de la columna en la definición.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />. </summary>
      <param name="dropForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />. </summary>
      <param name="dropIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />. </summary>
      <param name="dropPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />. </summary>
      <param name="dropTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />. </summary>
      <param name="moveTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />. </summary>
      <param name="renameColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />. </summary>
      <param name="renameTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />. </summary>
      <param name="sqlOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Data.Spatial.DbGeography" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Data.Spatial.DbGeometry" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.DateTime" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.DateTimeOffset" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usarán como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Decimal" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Guid" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Int64" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>     Genera código para especificar el valor predeterminado para una columna de tipo de datos desconocidos. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Single" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.String" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Genera el código subyacente del archivo con los metadatos de la migración. </summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Genera el código subyacente del archivo con los metadatos de la migración. </summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>     Genera código para especificar el valor predeterminado para una columna <see cref="T:System.TimeSpan" />. </summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="addForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="createIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>     Cita un identificador mediante un escape apropiado para que se pueda almacenar en una cadena. </summary>
      <returns>Identificador citado.</returns>
      <param name="identifier">Identificador que se cita.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>     Quita cualquier carácter no válido del nombre de un artefacto de base de datos. </summary>
      <returns>Nombre habilitado.</returns>
      <param name="name">Nombre que se va a habilitar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     Obtiene el nombre del tipo que se va a usar para una columna de un tipo de datos determinado. </summary>
      <returns>Nombre del tipo que se va a usar en una migración generada.</returns>
      <param name="primitiveTypeKind">Tipo de datos que se va a traducir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary> Genera el código de cierre para una clase que se inició con WriteClassStart. </summary>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>     Genera un espacio de nombres con instrucciones y definición de clase. </summary>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="base">Clase base para la clase generada.</param>
      <param name="designer">Valor que indica si esta clase se está generando para un archivo de código subyacente.</param>
      <param name="namespaces">Espacios de nombres para los que se van a agregar directivas Imports. Si es NULL, se usarán los espacios de nombre que se devuelven desde GetDefaultNamespaces.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Genera una propiedad para devolver el modelo de origen o de destino en el archivo subyacente de código. </summary>
      <param name="name">Nombre de la propiedad.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>   Esta clase la usan las migraciones Code First para leer y escribir historiales de migración desde la base de datos. No se ha diseñado para su uso por parte de otro código y es solo pública, de forma que Entity Framework puede tener acceso a la misma cuando se ejecuta en confianza parcial. En el futuro, es puede cambiar o quitar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
      <summary>     Obtiene o estable la fecha y hora en las que se creó esta entrada del historial de migraciones. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>     Obtiene o establece el identificador de la migración que representa esta fila. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>     Obtiene o establece el estado del modelo tras la aplicación de esta migración. </summary>
      <returns>Devuelve <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>     Obtiene o establece la versión de Entity Framework que creó esta entrada. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>Representa un error que se produce cuando una migración automática resulta en pérdida de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>     Inicializa una nueva instancia de la clase AutomaticDataLossException. </summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>Representa un error que se produce cuando hay cambios pendientes en el modelo tras aplicar la última migración y cuando está deshabilitada la migración automática.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>     Inicializa una nueva instancia de la clase AutomaticMigrationsDisabledException. </summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>Proporciona metadatos adicionales sobre una migración basada en código.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>     Obtiene el identificador único para la migración. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>     Obtiene el estado del modelo antes de ejecutar esta migración. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>     Obtiene el estado del modelo tras ejecutar esta migración. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Representa los errores que se producen en la canalización de migraciones Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Inicializa una nueva instancia de la clase MigrationsException con datos serializados. </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />, que contiene los datos del objeto serializado sobre la excepción que se está produciendo.</param>
      <param name="context">Enumeración <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene información contextual sobre el origen o el destino.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary> Inicializa una nueva instancia de la clase MigrationsException. </summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>Clase base para registradores que se pueden usar en procesos de migraciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>     Registra un mensaje informativo. </summary>
      <param name="message">Mensaje que se va a registrar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>     Registra cierta información adicional que solo se debería presentar al usuario si se solicitan resultados detallados. </summary>
      <param name="message">Mensaje que se va a registrar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>     Registra una advertencia que el usuario debe conocer. </summary>
      <param name="message">Mensaje que se va a registrar.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>Clase base para los decoradores que encapsulan el <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> central.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>     Inicializa una nueva instancia de la clase MigratorBase. </summary>
      <param name="innerMigrator">Migrador que está encapsulando este decorador.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>     Obtiene la configuración que se va a usar para el proceso de migraciones. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>     Obtiene una lista de las migraciones que se han aplicado a la base de datos. </summary>
      <returns>Lista de identificadores de migración</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>     Obtiene una lista de las migraciones que se definieron en el ensamblado. </summary>
      <returns>Lista de identificadores de migración</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>     Obtiene una lista de las migraciones pendientes que no se han aplicado a la base de datos. </summary>
      <returns>Lista de identificadores de migración</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>     Actualiza la base de datos de destino según la migración más reciente. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>     Actualiza la base de datos de destino según una migración determinada. </summary>
      <param name="targetMigration">Migración según la cual se va a realizar la actualización o degradación.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>Decorador para proporcionar registros durante las operaciones de migraciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>     Inicializa una nueva instancia de la clase MigratorLoggingDecorator. </summary>
      <param name="innerMigrator">Migrador que está encapsulando este decorador.</param>
      <param name="logger">Registrador donde se van a escribir mensajes.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>Representa un decorador para producir un script SQL en lugar de aplicar cambios a la base de datos. Si se usa este decorador para encapsular <see cref="T:System.Data.Entity.Migrations.DbMigrator" />, se evitará que <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> aplique cambios a la base de datos de destino.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator" />. </summary>
      <param name="innerMigrator">Migrador que está encapsulando este decorador.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>Actualiza la base de datos a la migración de destino.</summary>
      <returns>Script SQL generado.</returns>
      <param name="sourceMigration">Migración de origen.</param>
      <param name="targetMigration">Migración según la cual se va a realizar la actualización o degradación.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>Representa una columna que se va a agregar a una tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase AddColumnOperation. </summary>
      <param name="table">Nombre de la tabla a la que se debería agregar la columna.</param>
      <param name="column">Detalles de la columna que se va a agregar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>     Obtiene los detalles de la columna que se va a agregar. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>     Obtiene una operación que representa la operación de reversión de la acción de agregar la columna. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>Obtiene {inserte el texto aquí}.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>     Obtiene el nombre de la tabla a la que se debería agregar la columna. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>Representa una restricción de clave externa que se agrega a una tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase AddForeignKeyOperation.     Las propiedades PrincipalTable, PrincipalColumns, DependentTable y DependentColumns también deberían rellenarse. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>     Obtiene o establece un valor que indica si la eliminación en cascada se debe configurar según la restricción de clave externa. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>     Obtiene una operación para crear un índice en las columnas de clave externa. </summary>
      <returns>Operación para agregar el índice.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>     Obtiene una operación para quitar la restricción de clave externa nueva. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si un cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>     Nombres de las columnas a las que debería estar destinada la restricción de clave externa. </summary>
      <returns>Nombres de columna.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>Representa la operación de agregar una clave principal a una tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase AddPrimaryKeyOperation.     Las propiedades Table y Columns también se deben rellenar. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>     Obtiene una operación para quitar la clave principal. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>Representa la modificación de una columna existente.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase AlterColumnOperation. </summary>
      <param name="table">Nombre de la tabla a la que pertenece la columna.</param>
      <param name="column">Detalles de las modificaciones que se deben aplicar a la columna.</param>
      <param name="isDestructiveChange">Valor que indica si este cambio provocará la pérdida de datos.</param>
      <param name="inverse">Operación para revertir esta modificación de la columna.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase AlterColumnOperation. </summary>
      <param name="table">Nombre de la tabla a la que pertenece la columna.</param>
      <param name="column">Detalles de las modificaciones que se deben aplicar a la columna.</param>
      <param name="isDestructiveChange">Valor que indica si este cambio provocará la pérdida de datos.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>     Obtiene una nueva definición para la columna. </summary>
      <returns>Definición de la columna.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>     Obtiene una operación que representa la operación de reversión de la modificación.     No se puede calcular automáticamente el valor inverso, si no se facilitó al constructor, esta propiedad devolverá NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>     Obtiene el nombre de la tabla a la que pertenece la columna. </summary>
      <returns>Nombre de la tabla.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>Representa información sobre una columna.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     Inicializa una nueva instancia de la clase. </summary>
      <param name="type">Tipo de datos para esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
      <summary>     Inicializa una nueva instancia de la clase. </summary>
      <param name="type">Tipo de datos para esta columna.</param>
      <param name="typeUsage">     Detalles adicionales sobre el tipo de datos.     Incluye detalles como, por ejemplo, la longitud máxima, la capacidad de aceptar valores NULL, etc. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>     Obtiene el valor predeterminado para el tipo CLR correspondiente al tipo de la base de datos de esta columna. </summary>
      <returns>Valor predeterminado.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>     Obtiene el tipo CLR correspondiente al tipo de la base de datos de esta columna. </summary>
      <returns>Tipo CLR.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
      <summary>     Obtiene o establece un valor constante que se va usar como valor predeterminado para esta columna. </summary>
      <returns>Valor predeterminado para la columna.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
      <summary>     Obtiene o establece una expresión de SQL que se usa como valor predeterminado para esta columna. </summary>
      <returns>Valor predeterminado para la columna.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
      <summary>     Obtiene o establece un valor que indica si esta columna tiene una longitud fija.     Solo válido para tipos de datos de matriz. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>     Obtiene o establece un valor que indica si los valores para esta columna los va a generar la base de datos mediante el patrón de identidad. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
      <summary>     Determina si esta columna es de un tipo de datos más restringido que otra columna.     Se usa para determinar si al alterar la definición de columna facilitada para esta definición, se perderán datos. </summary>
      <returns>true si esta columna es de un tipo de datos más restringido.</returns>
      <param name="column">Columna con la que se va a comparar.</param>
      <param name="providerManifest">Detalles del proveedor de bases de datos que se están usando.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>     Obtiene o establece un valor que indica si esta columna puede almacenar valores NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>     Obtiene o establece un valor que indica si esta columna se debe configurar como marca de tiempo. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
      <summary>     Obtiene o establece un valor que indica si esta columna puede admitir caracteres Unicode.     Solo válido para tipos de datos textuales. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
      <summary>     Obtiene o establece la longitud máxima para esta columna.     Solo válido para tipos de datos de matriz. </summary>
      <returns>Longitud máxima.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
      <summary>     Obtiene o establece el nombre de la columna. </summary>
      <returns>Nombre.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
      <summary>     Obtiene o establece la precisión para esta columna.     Solo válido para tipos de datos decimal. </summary>
      <returns>Precisión.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
      <summary>     Obtiene o establece la escala para esta columna.     Solo válido para tipos de datos decimal. </summary>
      <returns>Escala.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
      <summary>     Obtiene o establece un tipo de datos específico del proveedor de bases de datos que se va a usar en esta columna. </summary>
      <returns>Tipo de datos.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
      <summary>     Obtiene el tipo de datos para esta columna. </summary>
      <returns>Tipo de datos.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
      <summary>     Obtiene detalles adicionales sobre el tipo de datos de esta columna.     Incluye detalles como, por ejemplo, la longitud máxima, la capacidad de aceptar valores NULL, etc. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>Representa la creación de un índice de base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase CreateIndexOperation.     Las propiedades Table y Columns también se deben rellenar. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>     Obtiene una operación para quitar este índice. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>     Obtiene o establece un valor que indica si se trata de un índice único. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>Representa la creación de una tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase CreateTableOperation. </summary>
      <param name="name">Nombre de la tabla que se va a crear.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>     Obtiene las columnas que se van a incluir en la tabla nueva. </summary>
      <returns>Columnas que se van a incluir.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>     Obtiene una operación para quitar la tabla. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>     Obtiene el nombre de la tabla cuyo nombre se va a crear. </summary>
      <returns>Nombre.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>     Obtiene o estable la clave principal de la tabla nueva. </summary>
      <returns>Clave principal.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
      <summary>Representa la eliminación de un registro nuevo en la tabla del historial de migraciones. La tabla del historial de migraciones se usa para almacenar un registro de las migraciones que se han aplicado a la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DeleteHistoryOperation. </summary>
      <param name="table">Nombre de la tabla del historial de migraciones.</param>
      <param name="migrationId">Identificador del registro de la migración que se va a eliminar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>Representa una columna que se va a quitar de una tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropColumnOperation. </summary>
      <param name="table">Nombre de la tabla de la que debería quitar la columna.</param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="inverse">Operación que representa la operación de reversión de la acción de quitar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropColumnOperation. </summary>
      <param name="table">Nombre de la tabla de la que debería quitar la columna.</param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>     Obtiene una operación que representa la operación de reversión de la acción de quitar la columna.     No se puede calcular automáticamente el valor inverso, si no se facilitó al constructor, esta propiedad devolverá NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>     Obtiene el nombre de la columna que se va a quitar. </summary>
      <returns>Nombre de la columna.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>     Obtiene el nombre de la tabla de la que se debería quitar la columna. </summary>
      <returns>Nombre de la tabla.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>Representa una restricción de clave externa que se quita de una tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropForeignKeyOperation. </summary>
      <param name="inverse">Operación que representa la reversión de la operación de quitar la restricción de clave externa.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropForeignKeyOperation.     Las propiedades PrincipalTable, DependentTable y DependentColumns también deberían rellenarse. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>     Obtiene una operación para quitar el índice asociado en las columnas de clave externa. </summary>
      <returns>Operación para quitar el índice.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>     Obtiene una operación que representa la reversión de la operación de quitar la restricción de clave externa.     No se puede calcular automáticamente el valor inverso, si no se facilitó al constructor, esta propiedad devolverá NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>Representa la operación de quitar un índice existente.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropIndexOperation. </summary>
      <param name="inverse">Operación que representa la operación de reversión de la acción de quitar el índice.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropIndexOperation. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>     Obtiene una operación que representa la operación de reversión de la acción de quitar el índice.     No se puede calcular automáticamente el valor inverso, si no se facilitó al constructor, esta propiedad devolverá NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si un cambio es destructivo.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>Representa la operación de quitar una clave principal de una tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropPrimaryKeyOperation.     Las propiedades Table y Columns también se deben rellenar. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>     Obtiene una operación para agregar la clave principal. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>Representa la operación de quitar una tabla existente.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropTableOperation. </summary>
      <param name="name">Nombre de la tabla que se va a quitar.</param>
      <param name="inverse">Operación que representa la operación de reversión de la acción de quitar la tabla.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase DropTableOperation. </summary>
      <param name="name">Nombre de la tabla que se va a quitar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>     Obtiene una operación que representa la operación de reversión de la acción de quitar la tabla.     No se puede calcular automáticamente el valor inverso, si no se facilitó al constructor, esta propiedad devolverá NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>     Obtiene el nombre de la tabla cuyo nombre se va a quitar. </summary>
      <returns>Nombre de la tabla.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>Clase base para cambios que afectan a las restricciones de clave externa.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase ForeignKeyOperation. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>     Nombres de las columnas de clave externa. </summary>
      <returns>Nombres de columna.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>     Obtiene o establece el nombre de la tabla donde se encuentran las columnas de clave externa. </summary>
      <returns>Nombre de la tabla.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>     Obtiene un valor que indica si se ha proporcionado un nombre específico para esta restricción de clave externa. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>     Obtiene o establece el nombre de esta restricción de clave externa.     Si no se especifica ningún nombre, se calculará un nombre predeterminado. </summary>
      <returns>Nombre de la restricción.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>     Obtiene o establece el nombre de la tabla a la que se destina la restricción de clave externa. </summary>
      <returns>Nombre de la tabla.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>Clase base común para operaciones que afectan a la tabla del historial de migraciones.  La tabla del historial de migraciones se usa para almacenar un registro de las migraciones que se han aplicado a la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase HistoryOperation. </summary>
      <param name="table">Nombre de la tabla del historial de migraciones.</param>
      <param name="migrationId">Nombre de la migración que se va a ver afectada.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
      <summary>     Obtiene el nombre de la migración que se va a ver afectada. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
      <summary>     Obtiene el nombre de la tabla del historial de migraciones. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>Clase base común para operaciones relativas a los índices.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase IndexOperation. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>     Obtiene o establece las columnas que se van a indizar. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>     Obtiene un valor que indica si se ha proporcionado un nombre específico para este índice. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>     Obtiene o establece el nombre de este índice.     Si no se especifica ningún nombre, se calculará un nombre predeterminado. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>     Obtiene o establece la tabla a la que pertenece el índice. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
      <summary>Representa la inserción de un registro nuevo en la tabla del historial de migraciones. La tabla del historial de migraciones se usa para almacenar un registro de las migraciones que se han aplicado a la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
      <summary>     Inicializa una nueva instancia de la clase InsertHistoryOperation. </summary>
      <param name="table">Nombre de la tabla del historial de migraciones.</param>
      <param name="migrationId">Identificador del registro de la migración que se va a insertar.</param>
      <param name="model">Valor que se va a almacenar en la columna del modelo.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
      <summary>Obtiene {inserte el texto aquí}.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
      <summary>     Obtiene el valor que se va a almacenar en la tabla del historial que representa el modelo de destino de la migración. </summary>
      <returns>Devuelve <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
      <summary>     Obtiene el valor que se va a almacenar en la tabla del historial que indica la versión de Entity Framework que se usa para producir esta migración. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>Representa una operación para modificar un esquema de base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase MigrationOperation. </summary>
      <param name="anonymousArguments">       Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>     Obtiene argumentos adicionales que pueden procesar proveedores. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>     Obtiene una operación que revertirá esta operación. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>     Obtiene un valor que indica si esta operación va a originar la pérdida de datos. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>Representa la operación de mover una tabla de un esquema a otro.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase MoveTableOperation. </summary>
      <param name="name">Nombre de la tabla que se va a mover.</param>
      <param name="newSchema">Nombre del esquema al que se va a mover la tabla.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>     Obtiene una operación que mueve la tabla a su esquema original. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>     Obtiene el nombre de la tabla cuyo nombre se va a mover. </summary>
      <returns>Nombre.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>     Obtiene el nombre del esquema al que se va a mover la tabla. </summary>
      <returns>Nombre del esquema.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>Clase base común para representar operaciones relativas a las claves principales.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Inicializa una nueva instancia de la clase PrimaryKeyOperation. </summary>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>     Obtiene las columnas que constituyen la clave principal. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>     Obtiene un valor que indica si se ha proporcionado un nombre específico para esta clave principal. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>     Obtiene o establece el nombre de esta clave principal.     Si no se especifica ningún nombre, se calculará un nombre predeterminado. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>     Obtiene o establece el nombre de la tabla que contiene la clave principal. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>Representa el cambio de nombre de una columna existente.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase RenameColumnOperation. </summary>
      <param name="table">Nombre de la tabla a la que pertenece la columna.</param>
      <param name="name">Nombre de la columna cuyo nombre se va a cambiar.</param>
      <param name="newName">Nuevo nombre para la columna.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>     Obtiene una operación que revierte el cambio de nombre. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>     Obtiene el nombre de la columna cuyo nombre se va a cambiar. </summary>
      <returns>Nombre.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>     Obtiene un nuevo nombre para la columna. </summary>
      <returns>Nombre nuevo.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>     Obtiene el nombre de la tabla a la que pertenece la columna. </summary>
      <returns>Nombre de la tabla.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>  Representa el cambio de nombre de una tabla existente.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase RenameTableOperation. </summary>
      <param name="name">Nombre de la tabla cuyo nombre se va a cambiar.</param>
      <param name="newName">Nuevo nombre para la tabla.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>     Obtiene una operación que revierte el cambio de nombre. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es destructivo.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>     Obtiene el nombre de la tabla cuyo nombre se va a cambiar. </summary>
      <returns>Nombre.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>     Obtiene un nuevo nombre para la tabla. </summary>
      <returns>Nombre nuevo.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>Representa una instrucción SQL específica de un proveedor que se va a ejecutar directamente con respecto a la base de datos de destino.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>     Inicializa una nueva instancia de la clase SqlOperation. </summary>
      <param name="sql">SQL que se va a ejecutar.</param>
      <param name="anonymousArguments">     Argumentos adicionales que pueden procesar proveedores.      Use sintaxis de tipo anónimo para especificar argumentos, por ejemplo 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>     Obtiene el SQL que se va a ejecutar. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>     Obtiene o establece un valor que indica si esta instrucción debe realizarse fuera del ámbito de la transacción que se usa para llevar a cabo el proceso de migración entre transacciones.     Si se establece en true, esta operación no se revertirá si se produce un error en el proceso de migración. </summary>
      <returns>true si la operación se revierte al producirse un error en el proceso de migración.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>   Clase base común para proveedores que convierten operaciones de migración independientes de proveedor en comandos SQL específicos de proveedores de bases de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>     Convierte un conjunto de operaciones de migración en SQL específico de proveedores de bases de datos. </summary>
      <returns>Lista de instrucciones SQL que se van a ejecutar para realizar las operaciones de migración.</returns>
      <param name="migrationOperations">Operaciones que se van a convertir.</param>
      <param name="providerManifestToken">Token que representa la versión de la base de datos de destino.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>Representa una operación de migración que se ha traducido a una instrucción SQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>     Obtiene o establece el SQL que se va a ejecutar para realizar esta operación de migración. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>     Obtiene o establece un valor que indica si esta instrucción debe realizarse fuera del ámbito de la transacción que se usa para llevar a cabo el proceso de migración entre transacciones.     Si se establece en true, esta operación no se revertirá si se produce un error en el proceso de migración. </summary>
      <returns>true si la operación no se va a revertir cuando se produzca un error en el proceso de migración; de lo contrario, es false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
      <summary>Representa un proveedor para convertir operaciones de migración independientes de proveedor en comandos SQL que se pueden ejecutar frente a Microsoft SQL Server Compact Edition.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
      <summary>Crea una conexión vacía para el proveedor actual. Permite que los proveedores derivados usen una conexión que no sea <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      <returns>Conexión vacía para el proveedor actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.     El SQL que se haya generado se debe agregar con el método Statement.</summary>
      <param name="alterColumnOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.     El SQL que se haya generado se debe agregar con el método Statement.</summary>
      <param name="dropColumnOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.     El SQL que se haya generado se debe agregar con el método Statement.</summary>
      <param name="dropIndexOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.     El SQL que se haya generado se debe agregar con el método Statement.</summary>
      <param name="moveTableOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.     El SQL que se haya generado se debe agregar con el método Statement.</summary>
      <param name="renameColumnOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.     El SQL que se haya generado se debe agregar con el método Statement.</summary>
      <param name="renameTableOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>Genera SQL para especificar un valor predeterminado DateTime constante que se va a establecer en una columna.     Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado.</summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>Genera SQL para crear un esquema de la base de datos. El SQL que se haya generado se debe agregar con el método Statement.</summary>
      <param name="schema">Esquema de base de datos que se va a crear.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Genera SQL para marcar una tabla como tabla del sistema. El SQL que se haya generado se debe agregar con el método Statement.</summary>
      <param name="createTableOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
      <summary>Genera un nombre citado. El nombre suministrado puede incluir o no el esquema.</summary>
      <returns>Nombre citado.</returns>
      <param name="name">Nombre que se va a citar.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
      <summary>Representa un proveedor para convertir operaciones de migración independientes de proveedor en comandos SQL que se pueden ejecutar frente a Microsoft SQL Server.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
      <summary>Genera SQL para especificar el tipo de datos de una columna. Este método genera solamente el tipo real, no el SQL para crear la columna. </summary>
      <returns>SQL que representa el tipo de datos.</returns>
      <param name="column">Columna en la que se genera el SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
      <summary>Crea una conexión vacía para el proveedor actual. Permite que los proveedores derivados usen una conexión que no sea <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      <returns>Conexión vacía para el proveedor actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
      <summary>Genera SQL para especificar un valor predeterminado bool constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado.</summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
      <summary>Genera SQL para especificar un valor predeterminado byte[] constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>Convierte un conjunto de operaciones de migración en SQL específico de Microsoft SQL Server. </summary>
      <returns>Lista de instrucciones SQL que se van a ejecutar para realizar las operaciones de migración.</returns>
      <param name="migrationOperations">Operaciones que se van a convertir.</param>
      <param name="providerManifestToken">Token que representa la versión de SQL Server de destino (es decir, "2005", "2008").</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="addColumnOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="addForeignKeyOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="alterColumnOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="createIndexOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="createTableOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="deleteHistoryOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="dropColumnOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="dropForeignKeyOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="dropIndexOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="dropPrimaryKeyOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="dropTableOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="insertHistoryOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="moveTableOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="renameColumnOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="renameTableOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
      <summary>Genera SQL para una <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.     El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="sqlOperation">Operación para la que se va a producir SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>Genera SQL para especificar un valor predeterminado de geografía constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>Genera SQL para especificar un valor predeterminado de geometría constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>Genera SQL para especificar un valor predeterminado DateTime constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
      <summary>Genera SQL para especificar un valor predeterminado DateTimeOffset constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
      <summary>Genera SQL para especificar un valor predeterminado Guid constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
      <summary>Genera SQL para especificar un valor predeterminado constante que se va a establecer en una columna.     Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
      <summary>Genera SQL para especificar un valor predeterminado de cadena constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
      <summary>Genera SQL para especificar un valor predeterminado TimeSpan constante que se va a establecer en una columna. Este método genera solamente el valor real, no el SQL para establecer el valor predeterminado. </summary>
      <returns>SQL que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que hay que establecer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>Genera SQL para crear un esquema de la base de datos. El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="schema">Esquema de base de datos que se va a crear.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Genera SQL para marcar una tabla como tabla del sistema. El SQL que se haya generado se debe agregar con el método Statement. </summary>
      <param name="createTableOperation">Tabla para marcar como tabla del sistema.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
      <summary>Genera un nombre citado. El nombre suministrado puede incluir o no el esquema. </summary>
      <returns>Nombre citado que se ha generado.</returns>
      <param name="name">Nombre que se va a citar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
      <summary>Cita un identificador para SQL Server. </summary>
      <returns>Identificador citado para SQL Server.</returns>
      <param name="identifier">Identificador que se cita.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Agrega una instrucción nueva que se va a ejecutar frente a la base de datos. </summary>
      <param name="writer">Escritor que contiene el SQL que se va a ejecutar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
      <summary>Agrega una instrucción nueva que se va a ejecutar frente a la base de datos. </summary>
      <param name="sql">Instrucción que se va a ejecutar.</param>
      <param name="suppressTransaction">Valor que indica si esta instrucción debe realizarse fuera del ámbito de la transacción que se usa para llevar a cabo el proceso de migración entre transacciones. Si se establece en true, esta operación no se revertirá si se produce un error en el proceso de migración.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
      <summary>Obtiene un nuevo <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> que se puede usar para generar SQL. Se trata simplemente de un método auxiliar para crear un escritor. Al escribir en el escritor, SQL no se registrará para su ejecución. Es preciso que pase el SQL generado al método Statement. </summary>
      <returns>Escritor de texto vacío que se va a usar para la generación de SQL.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>  Igual que T:System.CodeDom.Compiler.IndentedTextWriter, pero funciona en confianza parcial.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>     Inicializa una nueva instancia de la clase IndentedTextWriter usando el escritor de texto especificado y la cadena de tabulación predeterminada. </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> que se va a usar para los resultados. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>     Inicializa una nueva instancia de la clase IndentedTextWriter usando el escritor de texto especificado y la cadena de tabulación. </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> que se va a usar para los resultados. </param>
      <param name="tabString">Cadena de tabulación que se va a usar para aplicar sangrías. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>     Cierra el documento en el que se está escribiendo. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>     Especifica la cadena de tabulación predeterminada. Este campo es constante. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>     Obtiene la codificación del escritor de texto que se va a usar. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>     Vacía la secuencia. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>     Obtiene o establece el número de espacios para la sangría. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>     Obtiene el <see cref="T:System.IO.TextWriter" /> que se va a usar. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>     Obtiene o establece el carácter de nueva línea que se va a usar. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>     Proporciona la cadena de tabulación una vez para cada nivel de tabulación de acuerdo con la propiedad <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>     Escribe la representación de texto de un valor de tipo Boolean en la secuencia de texto. </summary>
      <param name="value">Valor de tipo Boolean que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>     Escribe un carácter en la secuencia de texto. </summary>
      <param name="value">Carácter que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>     Escribe una matriz de caracteres en la secuencia de texto. </summary>
      <param name="buffer">Matriz de caracteres que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>     Escribe una submatriz de caracteres en la secuencia de texto. </summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos. </param>
      <param name="index">Índice de inicio del búfer. </param>
      <param name="count">Número de caracteres que se van a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>     Escribe la representación textual de un Double en la secuencia de texto. </summary>
      <param name="value">Double que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>     Escribe la representación textual de un entero en la secuencia de texto. </summary>
      <param name="value">Entero que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>     Escribe la representación textual de un entero de 8 bytes en la secuencia de texto. </summary>
      <param name="value">Entero de 8 bytes que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>     Escribe la representación textual de un objeto en la secuencia de texto. </summary>
      <param name="value">Objeto que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>     Escribe la representación textual de un Single en la secuencia de texto. </summary>
      <param name="value">Single que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>     Escribe la cadena especificada en la secuencia de texto. </summary>
      <param name="s">Cadena que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>     Escribe una cadena con formato usando la misma semántica especificada. </summary>
      <param name="format">Cadena de formato. </param>
      <param name="arg0">Objeto que se va a escribir en la cadena con formato. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>     Escribe una cadena con formato usando la misma semántica especificada. </summary>
      <param name="format">Cadena con formato que se va a usar. </param>
      <param name="arg0">Primer objeto que se va a escribir en la cadena con formato. </param>
      <param name="arg1">Segundo objeto que se va a escribir en la cadena con formato. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>     Escribe una cadena con formato usando la misma semántica especificada. </summary>
      <param name="format">Cadena con formato que se va a usar. </param>
      <param name="arg">Matriz de argumentos que se va a devolver. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>     Escribe un terminador de línea. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>     Escribe la representación de texto de un Boolean seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="value">Boolean que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>     Escribe un carácter seguido de un terminador de línea en la secuencia de texto. </summary>
      <param name="value">Carácter que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>     Escribe una matriz de caracteres seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="buffer">Matriz de caracteres que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>     Escribe una submatriz de caracteres seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos. </param>
      <param name="index">Índice de inicio del búfer. </param>
      <param name="count">Número de caracteres que se van a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>     Escribe la representación de texto de un Double seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="value">Double que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>     Escribe la representación de texto de un entero seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="value">Entero que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>     Escribe la representación de texto de un entero de 8 bytes seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="value">Entero de 8 bytes que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>     Escribe la representación de texto de un objeto seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="value">Objeto que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>     Escribe la representación de texto de un Single seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="value">Single que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>     Escribe la cadena especificada seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="s">Cadena que se va a escribir. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>     Escribe una cadena con formato seguida de un terminador de línea, usando la misma semántica que se especificó. </summary>
      <param name="format">Cadena de formato. </param>
      <param name="arg0">Objeto que se va a escribir en la cadena con formato. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>     Escribe una cadena con formato seguida de un terminador de línea, usando la misma semántica que se especificó. </summary>
      <param name="format">Cadena con formato que se va a usar. </param>
      <param name="arg0">Primer objeto que se va a escribir en la cadena con formato. </param>
      <param name="arg1">Segundo objeto que se va a escribir en la cadena con formato. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>     Escribe una cadena con formato seguida de un terminador de línea, usando la misma semántica que se especificó. </summary>
      <param name="format">Cadena con formato que se va a usar. </param>
      <param name="arg">Matriz de argumentos que se va a devolver. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>     Escribe la representación de texto de un UInt32 seguida de un terminador de línea en la secuencia de texto. </summary>
      <param name="value">UInt32 que se va a obtener como resultado. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>     Escribe la cadena especificada en una línea sin tabulaciones. </summary>
      <param name="s">Cadena que se va a escribir. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary> Permite que se realice la configuración para un tipo complejo en un modelo.  Un elemento <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> se puede obtener utilizando el método <see cref="M:System.Data.Entity.DbModelBuilder.ComplexType``1" /> o un tipo personalizado derivado de <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> se puede registrar utilizando la propiedad <see cref="P:System.Data.Entity.DbModelBuilder.Configurations" />. </summary>
      <typeparam name="TComplexType">Tipo complejo que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary> Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>Permite que se realice la configuración para un tipo de entidad en un modelo.  Un elemento <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> se puede obtener utilizando el método Entity en <see cref="T:System.Data.Entity.DbModelBuilder" /> o un tipo personalizado derivado de <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> se puede registrar utilizando la propiedad Configurations en <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TEntityType">Representa el tipo de entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary> Configura el nombre del conjunto de entidades que se va a utilizar para este tipo de entidad. El nombre del conjunto de entidades solo se puede configurar para el tipo base en cada conjunto. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="entitySetName">Nombre del conjunto de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configura las propiedades de clave principal para este tipo de entidad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyExpression"> Expresión lambda que representa la propiedad que se va a utilizar como clave principal.  Por ejemplo, en C# t =&gt; t.Id     y en Visual Basic .NET Function(t) t.Id.  Si la clave principal se compone de varias propiedades, se ha de especificar un tipo anónimo que incluya las propiedades.  Por ejemplo, en C# t =&gt; new { t.Id1, t.Id2 } y en Visual Basic .NET Function(t) New From { t.Id1, t.Id2 }.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary> Configura una relación a varios de este tipo de entidad. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación para la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
      <typeparam name="TTargetEntity">Tipo de la entidad en el otro extremo de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configura una relación opcional de este tipo de entidad. Las instancias del tipo de entidad se podrán guardar en la base de datos sin que se especifique esta relación. La clave externa de la base de datos admitirá valores NULL. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación para la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
      <typeparam name="TTargetEntity">Tipo de la entidad en el otro extremo de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configura una relación requerida de este tipo de entidad. Las instancias del tipo de entidad no se podrán guardar en la base de datos a menos que se especifique esta relación. La clave externa de la base de datos no admitirá valores NULL. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación para la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
      <typeparam name="TTargetEntity">Tipo de la entidad en el otro extremo de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary> Permite una configuración avanzada relacionada con la forma en que un tipo de entidad derivado se asigna al esquema de base de datos. Las llamadas a este método son aditivas y las llamadas subsiguientes no invalidarán la configuración ya realizada por llamadas anteriores a este método. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="derivedTypeMapConfigurationAction">Acción que realiza la configuración frente a un elemento <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
      <typeparam name="TDerived">El tipo de entidad derivada que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary> Permite una configuración avanzada relacionada con la forma en que este tipo de entidad se asigna al esquema de base de datos. De forma predeterminada, cualquier configuración también se aplicará a cualquier tipo derivado de este tipo de entidad.  Los tipos derivados se pueden configurar utilizando la sobrecarga específica de este método que configura un tipo derivado o utilizando un elemento <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> para el tipo derivado.  Las propiedades de una entidad se pueden dividir entre varias tablas utilizando varias llamadas a este método.  Las llamadas son aditivas y las llamadas subsiguientes no invalidarán la configuración ya realizada por llamadas anteriores a este método. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="entityMappingConfigurationAction">Acción que realiza la configuración frente a un elemento <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>Configura el nombre de tabla al que se asigna este tipo de entidad. </summary>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary> Configura el nombre de tabla al que se asigna este tipo de entidad. </summary>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de base de datos de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary> Excepción producida por <see cref="T:System.Data.Entity.DbModelBuilder" /> durante la creación de modelos cuando se genera un modelo no válido. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary> Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
      <param name="info">Información de serialización.</param>
      <param name="context">Contexto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary> Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />. </summary>
      <param name="message">Mensaje de excepción.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary> Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />. </summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary> Clase base para realizar la configuración de una relación. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary> Se utiliza para configurar una propiedad <see cref="T:System.byte[]" /> de un tipo de entidad o de un tipo complejo. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary> Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configura el orden de la columna de base de datos utilizada para almacenar la propiedad. Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary> Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configura cómo la base de datos genera valores para la propiedad. </summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">     Patrón utilizado para generar valores para la propiedad en la base de datos.     Si se establece "null", se quitará de la propiedad la faceta de patrón generada por la base de datos.     Si se establece NULL, se originará el mismo comportamiento en tiempo de ejecución que si se especifica "None". </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Configura la propiedad para tener la longitud máxima especificada. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value"> Longitud máxima de la propiedad. Si se establece en "null", se quitará cualquier restricción de longitud máxima de la propiedad. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary> Configura la propiedad para que sea utilizada como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken"> Valor que indica si la propiedad es un token de simultaneidad o no. Si se especifica "null", se quitará de la propiedad la faceta de token de simultaneidad. La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false". </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary> Configura la propiedad para tener una longitud fija. Utilice HasMaxLength para establecer la longitud en que se fija la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary> Configura la propiedad para permitir la longitud máxima admitida por el proveedor de la base de datos. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary> Configura la propiedad para que sea opcional. La columna de base de datos utilizada para almacenar esta propiedad no admitirá valores NULL. De forma predeterminada, las propiedades <see cref="T:System.byte[]" /> son opcionales. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary> Configura la propiedad para que sea necesaria. La columna de base de datos utilizada para almacenar esta propiedad no admitirá valores NULL. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary> Configura la propiedad para que sea una versión de fila en la base de datos. El tipo de datos real variará en función del proveedor de base de datos que se esté utilizando. Si se establece la propiedad para que sea una versión de fila, se configurará automáticamente para que sea un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary> Configura la propiedad para tener una longitud variable. Las propiedades <see cref="T:System.byte[]" /> tienen una longitud variable de forma predeterminada. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary> Configura una relación que puede admitir funcionalidad de eliminación en cascada. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary> Configura la eliminación en cascada para que se active para la relación. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary> Configura si se activa o no la eliminación en cascada para la relación. </summary>
      <param name="value">true si se activa la eliminación en cascada; en caso contrario, false.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary> Permite que clases de configuración derivadas para entidades y tipos complejos se registren con un objeto <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary> Agrega un objeto <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> al objeto <see cref="T:System.Data.Entity.DbModelBuilder" />. Solo se puede agregar un objeto <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> para cada tipo en un modelo. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="complexTypeConfiguration">Configuración de tipo complejo que se va a agregar.</param>
      <typeparam name="TComplexType">Tipo complejo que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary> Agrega un objeto <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> al objeto <see cref="T:System.Data.Entity.DbModelBuilder" />. Solo se puede agregar un objeto <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> para cada tipo en un modelo. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="entityTypeConfiguration">Configuración de tipo de entidad que se va a agregar.</param>
      <typeparam name="TEntityType">Tipo de entidad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary> Permite la personalización de las convenciones utilizadas por una instancia de <see cref="T:System.Data.Entity.DbModelBuilder" />. Actualmente, la eliminación de una o varias convenciones predeterminadas es la única operación admitida. Las convenciones predeterminadas se pueden encontrar en el espacio de nombres <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>Deshabilita una convención para el objeto <see cref="T:System.Data.Entity.DbModelBuilder" />. Las convenciones predeterminadas disponibles para la eliminación se pueden encontrar en el espacio de nombres <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" />. </summary>
      <typeparam name="TConvention">El tipo de la convención que se va a deshabilitar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary> Se utiliza para configurar una propiedad <see cref="T:System.DateTime" /> de un tipo de entidad o de un tipo complejo. Esta funcionalidad de configuración se expone mediante la API fluida de Code First. Para obtener más información, vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary> Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configura el orden de la columna de base de datos utilizada para almacenar la propiedad. Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary> Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configura cómo la base de datos genera valores para la propiedad. </summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">     Patrón utilizado para generar valores para la propiedad en la base de datos.     Si se establece "null", se quitará de la propiedad la faceta de patrón generada por la base de datos.     Si se establece NULL, se originará el mismo comportamiento en tiempo de ejecución que si se especifica "None". </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary> Configura la precisión de la propiedad. Si el proveedor de la base de datos no admite precisión para el tipo de datos de la columna, se omite el valor. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Precisión de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary> Configura la propiedad para que sea utilizada como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken"> Valor que indica si la propiedad es un token de simultaneidad o no. Si se especifica "null", se quitará de la propiedad la faceta de token de simultaneidad. La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false". </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary> Configura la propiedad para que sea opcional. La columna de base de datos utilizada para almacenar esta propiedad admitirá valores NULL. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary> Configura la propiedad para que sea necesaria. La columna de base de datos utilizada para almacenar esta propiedad no admitirá valores NULL. De forma predeterminada, las propiedades <see cref="T:System.DateTime" /> son necesarias. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary> Se utiliza para configurar una propiedad <see cref="T:System.decimal" /> de un tipo de entidad o de un tipo complejo.  Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary> Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configura el orden de la columna de base de datos utilizada para almacenar la propiedad. Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary> Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configura cómo la base de datos genera valores para la propiedad. </summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">     Patrón utilizado para generar valores para la propiedad en la base de datos.     Si se establece "null", se quitará de la propiedad la faceta de patrón generada por la base de datos.     Si se establece NULL, se originará el mismo comportamiento en tiempo de ejecución que si se especifica "None". </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary> Configura la precisión y la escala de la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="precision">Precisión de la propiedad.</param>
      <param name="scale">Escala de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary> Configura la propiedad para que sea utilizada como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken"> Valor que indica si la propiedad es un token de simultaneidad o no. Si se especifica "null", se quitará de la propiedad la faceta de token de simultaneidad. La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false". </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary> Configura la propiedad para que sea opcional. La columna de base de datos utilizada para almacenar esta propiedad admitirá valores NULL. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary> Configura la propiedad para que sea necesaria. La columna de base de datos utilizada para almacenar esta propiedad no admitirá valores NULL. De forma predeterminada, las propiedades <see cref="T:System.decimal" /> son necesarias. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary> Configura una relación que puede admitir propiedades de clave externa que se exponen en el modelo de objetos. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TDependentEntityType">Tipo de entidad dependiente.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configura la relación para que se utilicen propiedades de clave externa que se exponen en el modelo de objetos. Si las propiedades de clave externa no se exponen en el modelo de objetos, se ha de utilizar el método Map.</summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="foreignKeyExpression">Expresión lambda que representa la propiedad que se va a utilizar como clave externa. Si la clave externa se compone de varias propiedades, se ha de especificar un tipo anónimo que incluya las propiedades. Cuando se utilizan varias propiedades de clave externa, las propiedades deben especificarse en el mismo orden en que las propiedades de clave principal se configuraron para el tipo de entidad de seguridad.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary> Configura la asignación de tabla y de columna para un tipo de entidad o un subconjunto de propiedades de un tipo de entidad. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TEntityType">Tipo de entidad que se va a asignar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary> Reasigna todas las propiedades heredadas de tipos base.  Cuando se configura un tipo derivado para que sea asignado a una tabla independiente, todas las propiedades se incluirán en la tabla en lugar de que solo se incluyan las propiedades no heredadas. Esto se conoce como asignación TPC (Tabla por tipo concreto). </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configura las propiedades que se incluirán en este fragmento de asignación. Si no se llama a este método, se configurarán todas las propiedades que no se han incluido todavía en un fragmento de asignación. </summary>
      <param name="propertiesExpression"> Expresión lambda para un tipo anónimo que contiene las propiedades que se van a asignar.</param>
      <typeparam name="TObject">Un tipo anónimo que incluye las propiedades que se van a asignar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configura la condición de discriminador utilizada para diferenciar entre tipos en una jerarquía de herencia. </summary>
      <returns>Un objeto de configuración para la configuración posterior de la condición de discriminador.</returns>
      <param name="property"> Expresión lambda que representa la propiedad que se va a utilizar para discriminar entre tipos. </param>
      <typeparam name="TProperty">El tipo de la propiedad que se va a utilizar para discriminar entre tipos.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary> Configura la columna de discriminador utilizada para diferenciar entre tipos en una jerarquía de herencia. </summary>
      <returns>Un objeto de configuración para la configuración posterior de los valores y la columna de discriminador.</returns>
      <param name="discriminator">El nombre de la columna de discriminador.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary> Configura el nombre de tabla al que se va a realizar la asignación. </summary>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary> Configura el nombre y el esquema de tabla a los que se va a realizar la asignación. </summary>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>Representa una configuración de asignación para la asociación de clave externa.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>Determina si el objeto <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> especificado es igual al objeto actual.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="other">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary> Configura el nombre de las columnas para la clave externa. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyColumnNames"> Nombres de columna de clave externa. Cuando se usan varias propiedades de clave externa, las propiedades deben especificarse en el mismo orden en que las propiedades de clave principal se configuraron para el tipo de entidad de destino. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Configura el nombre de tabla en que residen las columnas de clave externa.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla que se va a configurar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Configura el nombre y el esquema de tabla en que residen las columnas de clave externa. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>Configura una relación que solo puede admitir propiedades de clave externa que no se exponen en el modelo de objetos. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>Configura la relación para que se utilicen propiedades de clave externa que no se exponen en el modelo de objetos. Las columnas y la tabla se pueden personalizar especificando una acción de configuración. Si se especifica una acción de configuración vacía, la convención generará los nombres de columna. Si se exponen propiedades de clave externa en el modelo de objetos, se ha de utilizar el método HasForeignKey. No todas las relaciones admiten la exposición de propiedades de clave externa en el modelo de objetos.</summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="configurationAction">Acción que configura la tabla y las columnas de clave externa.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary> Se utiliza para configurar una columna con facetas de longitud para un tipo de entidad o un tipo complejo.  Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Configura la columna para tener la longitud máxima especificada. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value"> Longitud máxima de la columna. Si se establece el valor en null, se quitará cualquier restricción de longitud máxima de la columna y se utilizará una longitud predeterminada para la columna de base de datos. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>Configura la columna para tener una longitud fija. </summary>
      <returns>true si la columna tiene una longitud fija; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary> Configura la columna para permitir la longitud máxima admitida por el proveedor de la base de datos. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary> Configura la columna para tener una longitud variable. </summary>
      <returns>true si la columna tiene una longitud variable; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary> Se utiliza para configurar una propiedad con facetas de longitud para un tipo de entidad o un tipo complejo.  Esta funcionalidad de configuración está disponible utilizando la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Configura la propiedad para tener la longitud máxima especificada. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value"> Longitud máxima de la propiedad. Si se establece el valor en null, se quitará cualquier restricción de longitud máxima de la propiedad y se utilizará una longitud predeterminada para la columna de base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary> Configura la propiedad para tener una longitud fija. Utilice HasMaxLength para establecer la longitud en que se fija la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary> Configura la propiedad para permitir la longitud máxima admitida por el proveedor de la base de datos. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary> Configura la propiedad para tener una longitud variable. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary> Configura una relación a varios de un tipo de entidad. </summary>
      <typeparam name="TEntityType">Tipo de entidad del que se origina la relación.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de entidad que es el destino de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary> Configura la relación para que sea de varios a varios sin una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede usarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Configura la relación para que sea de varios a varios con una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary> Configura la relación para que sea de varios a opcional sin una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configura la relación para que sea de varios a opcional con una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary> Configura la relación para que sea de varios a requerido sin una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede usarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configura la relación para que sea de varios a requerido con una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary> Configura la asignación de tabla y de columna de una relación de varios a varios. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>Determina si el objeto <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> especificado es igual al objeto actual.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="other">Objeto <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary> Configura el nombre de las columnas para la clave externa izquierda. La clave externa izquierda representa la propiedad de navegación especificada en la llamada a HasMany en <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyColumnNames"> Nombres de columna de clave externa. Cuando se utilizan varias propiedades de clave externa, las propiedades deben especificarse en el mismo orden en que las propiedades de clave principal se configuraron para el tipo de entidad de destino. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary> Configura el nombre de las columnas para la clave externa derecha. La clave externa derecha representa la propiedad de navegación especificada en la llamada a WithMany. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyColumnNames"> Nombres de columna de clave externa. Cuando se utilizan varias propiedades de clave externa, las propiedades deben especificarse en el mismo orden en que las propiedades de clave principal se configuraron para el tipo de entidad de destino. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary> Configura el nombre de tabla combinada para la relación. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary> Configura el nombre y el esquema de tabla combinada para la relación. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
      <summary> Configura una relación de varios a varios. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary> Configura la tabla y las columnas de clave externa utilizadas para almacenar la relación. </summary>
      <param name="configurationAction">Acción que configura la tabla y las columnas de clave externa.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary> Configura una condición utilizada para discriminar entre tipos en una herencia de jerarquía sobre la base de los valores asignados a una propiedad. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary> Configura la condición para que se requiera un valor en la propiedad.  Se supone que las filas que no tienen un valor asignado a la columna en que se almacena esta propiedad son del tipo base de este tipo de entidad. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>Configura una relación opcional de un tipo de entidad. </summary>
      <typeparam name="TEntityType">Tipo de entidad del que se origina la relación.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de entidad que es el destino de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary> Configura la relación para que sea de opcional a varios sin una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede usarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Configura la relación para que sea de opcional a varios con una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary> Configura la relación para que sea de opcional a opcional sin una propiedad de navegación en el otro lado de la relación. El tipo de entidad que se va a configurar será el dependiente y contendrá una clave externa al principal.  El tipo de entidad que es el destino de la relación será el principal de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configura la relación para que sea de opcional a opcional con una propiedad de navegación en el otro lado de la relación. El tipo de entidad que se va a configurar será el dependiente y contendrá una clave externa al principal.  El tipo de entidad que es el destino de la relación será el principal de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary> Configura la relación para que sea de opcional a opcional sin una propiedad de navegación en el otro lado de la relación. El tipo de entidad que se va a configurar será el principal de la relación.  El tipo de entidad que es el destino de la relación será el dependiente y contendrá una clave externa al principal. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configura la relación para que sea de opcional a opcional con una propiedad de navegación en el otro lado de la relación. El tipo de entidad que se va a configurar será el principal de la relación.  El tipo de entidad que es el destino de la relación será el dependiente y contendrá una clave externa al principal. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>Configura el extremo especificado de la relación para que sea de requerido sin una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura el extremo especificado de la relación para que sea de requerido con una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Objeto de configuración que puede usarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>Configura una columna primitiva de un tipo de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configura el orden de la columna primitiva utilizada para almacenar la propiedad. Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary> Configura el tipo de datos de la columna primitiva utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>Configura la columna primitiva para que sea opcional.</summary>
      <returns>true si la columna es opcional; en caso contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>Configura la columna primitiva para que sea necesaria.</summary>
      <returns>true si la columna es necesaria; en caso contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary> Se utiliza para configurar una propiedad primitiva de un tipo de entidad o de un tipo complejo.  Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary> Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configura el orden de la columna de base de datos utilizada para almacenar la propiedad. Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary> Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configura cómo la base de datos genera valores para la propiedad. </summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">     Patrón utilizado para generar valores para la propiedad en la base de datos.     Si se establece "null", se quitará de la propiedad la faceta de patrón generada por la base de datos.     Si se establece NULL, se originará el mismo comportamiento en tiempo de ejecución que si se especifica "None". </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary> Configura la propiedad para que sea utilizada como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken"> Valor que indica si la propiedad es un token de simultaneidad o no. Si se especifica null, se quitará de la propiedad la faceta de token de simultaneidad. La especificación de null producirá el mismo comportamiento en tiempo de ejecución que si se especifica false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary> Configura la propiedad para que sea opcional. La columna de base de datos utilizada para almacenar esta propiedad admitirá valores NULL. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary> Configura la propiedad para que sea necesaria. La columna de base de datos utilizada para almacenar esta propiedad no admitirá valores NULL. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary> Configura una relación requerida de un tipo de entidad. </summary>
      <typeparam name="TEntityType">Tipo de entidad del que se origina la relación.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de entidad que es el destino de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary> Configura la relación para que sea de requerido a varios sin una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Configura la relación para que sea de requerido a varios con una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary> Configura la relación para que sea de requerido a opcional sin una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configura la relación para que sea de requerido a opcional con una propiedad de navegación en el otro lado de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary> Configura la relación para que sea de requerido a requerido sin una propiedad de navegación en el otro lado de la relación. El tipo de entidad que se va a configurar será el dependiente y contendrá una clave externa al principal.  El tipo de entidad que es el destino de la relación será el principal de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configura la relación para que sea de requerido a requerido con una propiedad de navegación en el otro lado de la relación. El tipo de entidad que se va a configurar será el dependiente y contendrá una clave externa al principal.  El tipo de entidad que es el destino de la relación será el principal de la relación. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary> Configura la relación para que sea de requerido a requerido sin una propiedad de navegación en el otro lado de la relación. El tipo de entidad que se va a configurar será el principal de la relación.  El tipo de entidad que es el destino de la relación será el dependiente y contendrá una clave externa al principal. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configura la relación para que sea de requerido a requerido con una propiedad de navegación en el otro lado de la relación. El tipo de entidad que se va a configurar será el principal de la relación.  El tipo de entidad que es el destino de la relación será el dependiente y contendrá una clave externa al principal. </summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression"> Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.  </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary> Configura una columna de base de datos utilizada para almacenar valores de cadena. Esta funcionalidad de configuración se expone mediante la API fluida de Code First. Para obtener más información, vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configura el orden de la columna de base de datos. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary> Configura el tipo de datos de la columna de base de datos. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configura la propiedad para tener la longitud máxima especificada.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Longitud máxima de la propiedad. Si se establece el valor en null, se utilizará una longitud predeterminada para la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary> Configura la columna para tener una longitud fija. Utilice HasMaxLength para establecer la longitud en que se fija la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary> Configura la columna para permitir la longitud máxima admitida por el proveedor de la base de datos. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary> Configura la columna para que sea opcional. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary> Configura la columna para que sea necesaria. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary> Configura la columna para admitir contenido de cadena Unicode. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary> Configura si la columna admite o no contenido de cadena Unicode. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="unicode"> Valor que indica si la columna admite o no contenido de cadena Unicode. Si se especifica null, se quitará la faceta Unicode de la columna. La especificación de null producirá el mismo comportamiento en tiempo de ejecución que si se especifica false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary> Configura la columna para tener una longitud variable. Las columnas tienen una longitud variable de forma predeterminada. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>Se utiliza para configurar una propiedad <see cref="T:System.string" /> de un tipo de entidad o de un tipo complejo. Esta funcionalidad de configuración se expone mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configura el orden de la columna de base de datos utilizada para almacenar la propiedad. Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary> Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configura cómo la base de datos genera valores para la propiedad. </summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">     Patrón utilizado para generar valores para la propiedad en la base de datos.     Si se establece "null", se quitará de la propiedad la faceta de patrón generada por la base de datos.     Si se establece NULL, se originará el mismo comportamiento en tiempo de ejecución que si se especifica "None". </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configura la propiedad para tener la longitud máxima especificada. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Longitud máxima de la propiedad. Si se establece el valor de esta propiedad en null, se quitará cualquier restricción de longitud máxima de la propiedad y se utilizará una longitud predeterminada para la columna de base de datos. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary> Configura la propiedad para que sea utilizada como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken"> Especifica si la propiedad es o no un token de simultaneidad. Si se especifica null, se quitará de la propiedad la faceta de token de simultaneidad. La especificación de null producirá el mismo comportamiento en tiempo de ejecución que si se especifica false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>Configura la propiedad para tener una longitud fija. Utilice HasMaxLength para establecer la longitud en que se fija la propiedad. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>Configura la propiedad para permitir la longitud máxima admitida por el proveedor de la base de datos. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>Configura la propiedad para que sea opcional. La columna de base de datos utilizada para almacenar esta propiedad no admitirá valores NULL. De forma predeterminada, las propiedades <see cref="T:System.string" /> son opcionales. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary> Configura la propiedad para que sea necesaria. La columna de base de datos utilizada para almacenar esta propiedad no admitirá valores NULL. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Configura la propiedad para admitir contenido de cadena Unicode. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Configura si la propiedad admite o no contenido de cadena Unicode. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="unicode"> Valor que indica si la propiedad admite o no contenido de cadena Unicode. Si se especifica null, se quitará la faceta Unicode de la propiedad. La especificación de null producirá el mismo comportamiento en tiempo de ejecución que si se especifica false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>Configura la propiedad para tener una longitud variable. Las propiedades <see cref="T:System.string" /> tienen una longitud variable de forma predeterminada. </summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>Permite que se realice la configuración para un tipo en un modelo. </summary>
      <typeparam name="TStructuralType">El tipo que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Excluye una propiedad del modelo de modo que no se asignará a la base de datos. </summary>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
      <typeparam name="TProperty">Tipo propietario de la propiedad que se va a omitir.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary> Configura una propiedad <see cref="T:System.byte[]" /> que está definida en este tipo. </summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
      <summary>   Configura una propiedad <see cref="T:DbGeography" /> que está definida en este tipo. </summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">   Expresión lambda que representa la propiedad que se va a configurar.   C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
      <summary>   Configura una propiedad <see cref="T:DbGeometry" /> que está definida en este tipo. </summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">   Expresión lambda que representa la propiedad que se va a configurar.   C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary> Configura una propiedad <see cref="T:System.DateTime" /> que está definida en este tipo. </summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary> Configura una propiedad <see cref="T:System.DateTimeOffset" /> que está definida en este tipo. </summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary> Configura una propiedad <see cref="T:System.decimal" /> que está definida en este tipo. </summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary> Configura una propiedad Nullable(<see cref="T:System.DateTime" />) que está definida en este tipo. </summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary> Configura una propiedad Nullable(<see cref="T:System.DateTimeOffset" />) que está definida en este tipo. </summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary> Configura una propiedad Nullable(<see cref="T:System.Decimal" />) que está definida en este tipo. </summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary> Configura una propiedad Nullable(<see cref="T:System.TimeSpan" />) que está definida en este tipo. </summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary> Configura una propiedad Nullable(<see cref="T:System.struct" />) que está definida en este tipo. </summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
      <typeparam name="T">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary> Configura una propiedad <see cref="T:System.string" /> que está definida en este tipo. </summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary> Configura una propiedad <see cref="T:System.TimeSpan" /> que está definida en este tipo. </summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configura una propiedad <see cref="T:System.struct" /> que está definida en este tipo. </summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression"> Expresión lambda que representa la propiedad que se va a configurar. Por ejemplo, en C# t =&gt; t.MyProperty y en Visual Basic .NET Function(t) t.MyProperty. </param>
      <typeparam name="T">El tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary> Configura una columna de discriminador utilizada para diferenciar entre tipos en una jerarquía de herencia. Esta funcionalidad de configuración se expone mediante la API fluida de Code First. Para obtener más información, vea <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto. Este método se oculta de IntelliSense.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual. Este método se oculta de IntelliSense.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>Configura el valor de discriminador utilizado para identificar el tipo de entidad que se configura de otros tipos en la jerarquía de herencia. </summary>
      <returns>Un objeto de configuración para la configuración de la columna utilizada para almacenar valores de discriminador.</returns>
      <param name="value">Valor que se va a utilizar para identificar el tipo de entidad.</param>
      <typeparam name="T">Tipo del valor de discriminador.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>Configura el valor de discriminador utilizado para identificar el tipo de entidad que se configura de otros tipos en la jerarquía de herencia. </summary>
      <returns>Un objeto de configuración para la configuración de la columna utilizada para almacenar valores de discriminador.</returns>
      <param name="value">Valor que se va a utilizar para identificar el tipo de entidad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary> Configura el valor de discriminador utilizado para identificar el tipo de entidad que se configura de otros tipos en la jerarquía de herencia. </summary>
      <returns>Un objeto de configuración para la configuración de la columna utilizada para almacenar valores de discriminador.</returns>
      <param name="value">Valor que se va a utilizar para identificar el tipo de entidad.</param>
      <typeparam name="T">Tipo del valor de discriminador.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual. Este método se oculta de IntelliSense.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>Convención para detectar propiedades de navegación inversas entre sí cuando solo existe un par de propiedades de navegación entre los tipos relacionados.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
      <summary> Convención para convertir los tipos de datos en que se especificó explícitamente la grafía en minúscula, utilizando anotaciones de datos o la API de <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.ComplexTypeAttribute" /> encontradas en tipos del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>Convención para configurar un tipo como tipo complejo si no tiene ninguna clave principal, ningún tipo base asignado y ninguna propiedad de navegación. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary> Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute" /> encontradas en propiedades del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>Convención para establecer la precisión en 18 y la escala en 2 para propiedades de tipo decimal. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>Convención para mover las propiedades de clave principal de modo que aparezcan en primer lugar. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>Convención para distinguir entre relaciones opcionales y requeridas basándose en la admisión de valores NULL en CLR de la propiedad de clave externa. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> encontradas en propiedades de navegación del modelo.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> encontradas en propiedades de clave externa del modelo.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>Identifica las convenciones que se pueden quitar de una instancia de <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>Convención para detectar propiedades de clave principal.  </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.InversePropertyAttribute" /> encontradas en propiedades del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> encontradas en propiedades del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>Convención para agregar una eliminación en cascada a la tabla combinada de las tablas implicadas en una relación de varios a varios.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>Garantiza que las propiedades heredadas de asignación no creen una asignación no válida o no admitida</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> encontradas en propiedades del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>Convención para detectar las propiedades de clave externa cuyos nombres son una combinación del nombre de propiedad de navegación dependiente y los nombres de propiedad de clave principal de tipo principal. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> encontradas en propiedades del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> encontradas en tipos del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>Convención para habilitar la eliminación en cascada en las relaciones requeridas. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>Convención para configurar las claves principales del tipo de entidad dependiente como claves externas en una relación de uno a uno. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>Convención para establecer el nombre de conjunto de entidades de modo que sea una versión pluralizada del nombre de tipo de entidad. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>Convención para establecer el nombre de tabla de modo que sea una versión pluralizada del nombre de tipo de entidad. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>Convención para detectar las propiedades de clave externa cuyos nombres coinciden con los nombres de propiedad de clave principal de tipo principal. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>Convención para establecer longitudes máximas predeterminadas en tipos de propiedad que admiten facetas de longitud. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> encontradas en propiedades de navegación del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> encontradas en propiedades primitivas del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>Establece una longitud máxima predeterminada de 4000 para las propiedades cuyo tipo admita facetas de longitud cuando SqlCe sea el proveedor.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>Convención para configurar claves principales de tipo entero de modo que sean de identidad. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> encontradas en propiedades del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.TableAttribute" /> encontradas en tipos del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> encontradas en propiedades del modelo. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>Convención para detectar las propiedades de clave externa cuyos nombres son una combinación del nombre de tipo principal y los nombres de propiedad de clave principal de tipo principal. </summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>Excepción que se produce en <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> cuando tiene lugar un error en la validación de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Mensaje de excepción.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="entityValidationResults">Resultados de la validación.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="entityValidationResults">Resultados de la validación.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>Devuelve los errores de validación.</summary>
      <returns>Los errores de validación, si se ha producido alguno.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>Representa los resultados de la validación para una entidad única.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>Crea una instancia de la clase <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />. </summary>
      <param name="entry">La entrada de entidad a la que se aplican los resultados. Nunca es null.</param>
      <param name="validationErrors">Una lista de instancias de <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Este resultado nunca es NULL, pero puede ser un valor vacío, lo que significa que la entidad es válida. </param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>Obtiene la instancia de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> a la que se aplican los resultados.</summary>
      <returns>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>Obtiene un indicador si la entidad es válida.</summary>
      <returns>true si la entidad es válida; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>Obtiene los errores de validación. El valor de esta propiedad nunca es null. </summary>
      <returns>Los errores de validación.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>Excepción producida en <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> cuando se produce una excepción en el código de validación.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> con la información y el contexto de serialización especificados. </summary>
      <param name="info">Información de serialización.</param>
      <param name="context">Contexto de transmisión por secuencias.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
      <param name="message">Mensaje de excepción.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>Error de validación. Puede ser un error de validación en el nivel de entidad o en el nivel de propiedad. </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>Crea una instancia de <see cref="T:System.Data.Entity.Validation.DbValidationError" />.</summary>
      <param name="propertyName">Nombre de la propiedad no válida. Puede ser null.</param>
      <param name="errorMessage">Mensaje de error de validación. Puede ser null.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>Obtiene el mensaje de error de validación.</summary>
      <returns>Mensaje de error de validación.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>Obtiene el nombre de la propiedad no válida. </summary>
      <returns>Nombre de la propiedad no válida.</returns>
    </member>
  </members>
</doc>